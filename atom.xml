<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[一枝红杏出墙来]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="/about/"/>
  <updated>2014-11-12T15:16:55.311Z</updated>
  <id>/about/</id>
  
  <author>
    <name><![CDATA[尹现伟]]></name>
    <email><![CDATA[ios@yinxianwei.cn]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CocoaPods制作篇]]></title>
    <link href="/about/2014/11/12/CocoaPods%E5%88%B6%E4%BD%9C%E7%AF%87/"/>
    <id>/about/2014/11/12/CocoaPods制作篇/</id>
    <published>2014-11-12T14:29:59.000Z</published>
    <updated>2014-11-12T14:38:48.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>作者：wangzz<br>原文地址：<a href="http://blog.csdn.net/wzzvictory/article/details/20067595" target="_blank" rel="external">http://blog.csdn.net/wzzvictory/article/details/20067595</a><br>转载请注明出处<br>如果觉得文章对你有所帮助，请通过留言或关注微信公众帐号wangzzstrive来支持我，谢谢!</p>
</blockquote>
<p>学会使用别人的Pods依赖库以后，你一定对创建自己的依赖库跃跃欲试，今天就来揭开Pods依赖库创建过程的神秘面纱。整个创建过程都以我实现的一个名称为WZMarqueeView跑马灯效果的view为例，步骤如下：</p>
<h1 id="一、创建自己的github仓库">一、创建自己的github仓库</h1>
<p>CocoaPods都托管在github上(官方链接为：<a href="https://github.com/CocoaPods" target="_blank" rel="external">https://github.com/CocoaPods</a>)，所有的Pods依赖库也都依赖github，因此第一步我们需要创建一个属于自己的github仓库。仓库创建界面如下图：<br><img src="http://img.blog.csdn.net/20140304101538437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3p6dmljdG9yeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>上图中标了序号的共6处，对应的说明如下：</p>
<ol>
<li>Repository name<br>仓库名称，这里写成WZMarqueeView，必填的；    </li>
<li>Description<br>仓库的描述信息，可选的；</li>
<li>仓库的公开性<br>这里只能选Public，一个是因为Private是要money的，再一个Private别人看不到还共享个毛；</li>
<li>是否创建一个默认的README文件<br>一个完整地仓库，都需要README说明文档，建议选上。当然不嫌麻烦的话你也可以后面再手动创建一个；</li>
<li>是否添加.gitignore文件<br>.gitignore文件里面记录了若干中文件类型，凡是该文件包含的文件类型，git都不会将其纳入到版本管理中。是否选择看个人需要；    </li>
<li>license类型<br>正规的仓库都应该有一个license文件，Pods依赖库对这个文件的要求更严，是必须要有的。因此最好在这里让github创建一个，也可以自己后续再创建。我使用的license类型是MIT。<br>上面的各项都填写完毕后，点击Create repository按钮即可，创建成功地界面如图：<br><img src="http://img.blog.csdn.net/20140304103428187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd3p6dmljdG9yeQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>到这，仓库创建过程就结束了。    </li>
</ol>
<h1 id="二、clone仓库到本地">二、clone仓库到本地</h1>
<p>为了便于向仓库中删减内容，需要先将仓库clone到本地，操作方式有多种，推荐使用命令行：     </p>
<pre><code>git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/wangzz/WZMarqueeView.git     
</code></pre><p>操作完成后，github上对应的文件都会拷贝到本地，目录结构为:<br>github上仓库中的.gitignore文件是以.开头的隐藏文件，因此这里只能看到两个。<br>后续我们的所有文件增、删、改都在这个目录下进行。</p>
<h1 id="三、向本地git仓库中添加创建Pods依赖库所需文件">三、向本地git仓库中添加创建Pods依赖库所需文件</h1>
<p>注意：以下描述的文件都要放在步骤二clone到本地的git仓库的根目录下面。</p>
<ol>
<li><p>后缀为.podspec文件</p>
<p> 该文件为Pods依赖库的描述文件，每个Pods依赖库必须有且仅有那么一个描述文件。文件名称要和我们想创建的依赖库名称保持一致，我的WZMarqueeView依赖库对应的文件名为WZMarqueeView.podspec。<br> 1.1. podspec文件内容<br> WZMarqueeView.podspec的保存内容为：    </p>
<blockquote>
<p>Pod::Spec.new do |s|<br>   s.name             = “WZMarqueeView”<br>   s.version          = “1.0.0”<br>   s.summary          = “A marquee view used on iOS.”<br>   s.description      = &lt;&lt;-DESC<br>   It is a marquee view used on iOS, which implement by Objective-C.<br>   DESC<br>   s.homepage         = “<a href="https://github.com/wangzz/WZMarqueeView" target="_blank" rel="external">https://github.com/wangzz/WZMarqueeView</a>“<br>   # s.screenshots    = “www.example.com/screenshots_1”, “www.example.com/screenshots_2”<br>   s.license          = ‘MIT’<br>   s.author           = { “王中周” =&gt; “wzzvictory_tjsd@163.com” }<br>   s.source           = { :git =&gt; “<a href="https://github.com/wangzz/" target="_blank" rel="external">https://github.com/wangzz/</a>    WZMarqueeView.git”, :tag =&gt; s.version.to_s }<br>   # s.social_media_url = ‘<a href="https://twitter.com/NAME" target="_blank" rel="external">https://twitter.com/NAME</a>‘<br>   s.platform     = :ios, ‘4.3’<br>   # s.ios.deployment_target = ‘5.0’<br>   # s.osx.deployment_target = ‘10.7’<br>   s.requires_arc = true<br>   s.source_files = ‘WZMarqueeView/*‘<br>   # s.resources = ‘Assets’<br>   # s.ios.exclude_files = ‘Classes/osx’<br>   # s.osx.exclude_files = ‘Classes/ios’<br>   # s.public_header_files = ‘Classes/<em>*/</em>.h’<br>   s.frameworks = ‘Foundation’, ‘CoreGraphics’, ‘UIKit’<br>   end     </p>
</blockquote>
<p> 该文件是ruby文件，里面的条目都很容易知道含义。<br> 其中需要说明的又几个参数：<br> ①s.license<br> Pods依赖库使用的license类型，大家填上自己对应的选择即可。<br> ②s.source_files<br> 表示源文件的路径，注意这个路径是相对podspec文件而言的。<br> ③s.frameworks<br> 需要用到的frameworks，不需要加.frameworks后缀。<br> 1.2 如何创建podspec文件<br> 大家创建自己的podspec文件可以有两个途径：<br> ①copy我的podspec文件然后修改对应的参数，推荐使用这种方式。<br> ②执行以下创建命令：        </p>
<blockquote>
<p>$ pod spec create WZMarqueeView        </p>
</blockquote>
<p> 也会创建名为WZMarqueeView.podspec的文件。但是打开创建完的文件你就会发现里面的东西太多了，很多都是我们不需要的。</p>
</li>
<li><p>LICENSE文件      </p>
<p> CocoaPods强制要求所有的Pods依赖库都必须有license文件，否则验证不会通过。license的类型有很多种，详情可以参考网站tl;dr Legal。在创建github仓库的时候，我已经选择了MIT类型的license</p>
</li>
<li>主类文件<br> 创建Pods依赖库就是为了方便别人使用我们的成果，比如我想共享给大家的WZMarqueeView类，是我想提供给广大用户使用的，这个类自然是必不可少的。我把这个类包含的两个文件放到一个名称为WZMarqueeView的文件夹中，对应的目录结构如图：<br> <img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200448382.jpg" alt=""></li>
<li>demo工程<br> 为了快速地教会别人使用我们的Pods依赖库，通常需要提供一个demo工程。我创建的demo工程放到了一个名为WZMarqueeViewDemo的文件夹中，该目录包含的文件如下图所示：<br> <img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200448383.jpg" alt=""></li>
<li>README.md<br> 使用github的人应该都熟悉这个文件，它是一个成功github仓库必不可少的一部分，使用的是markdown标记语言，用于对仓库的详细说明。<br>以上所说的5个是创建Pods依赖库所需最基础的文件，其中1、2、3是必需的，4、5是可选但强烈推荐创建的。 添加完这些文件以后，我的github本地仓库目录就变成了下图所示的样子：<br><img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200449388.jpg" alt="">    </li>
</ol>
<h1 id="四、提交修改文件到github">四、提交修改文件到github</h1>
<p>经过步骤三，向本地的git仓库中添加了不少文件，现在需要将它们提交到github仓库中去。提交过程分以下几步：    </p>
<ol>
<li><p>pod验证<br> 执行以下命令：</p>
<blockquote>
<p>$ set the new version to 1.0.0<br>$ set the new tag to 1.0.0        </p>
</blockquote>
<p> 这两条命令是为pod添加版本号并打上tag。然后执行pod验证命令：</p>
<blockquote>
<p>$ pod lib lint        </p>
</blockquote>
<p> 如果一切正常，这条命令执行完后会出现下面的输出：            </p>
<blockquote>
<p>-&gt; WZMarqueeView (1.0.0)<br> WZMarqueeView passed validation.        </p>
</blockquote>
<p> 到此，pod验证就结束了。 需要说明的是，在执行pod验证命令的时候，打印出了任何warning或者error信息，验证都会失败！如果验证出现异常，打印的信息会很详细，大家可以根据对应提示做出修改。</p>
</li>
<li><p>本地git仓库修改内容上传到github仓库<br> 依次执行以下命令：</p>
<blockquote>
<p>$ git add -A &amp;&amp; git commit -m “Release 1.0.0.”<br>$ git tag ‘1.0.0’<br>$ git push —tags<br>$ git push origin master    </p>
</blockquote>
<p> 上述命令均属git的范畴，这里不多述。如果一切正常，github上就应该能看到自己刚添加的内容了。如下图所示：<br><img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200449389.jpg" alt="">        </p>
</li>
</ol>
<h1 id="五、上传podspec文件到CocoaPods官方仓库中">五、上传podspec文件到CocoaPods官方仓库中</h1>
<p>经过前边的四步操作，你可能以为已经结束了，不幸的是还早着呢。 要想一个Pods依赖库真正可用，还需要做最后一步操作，将我们刚才生成的podspec文件上传到CocoaPods官方的Specs仓库中，链接为：<a href="https://github.com/CocoaPods/Specs" target="_blank" rel="external">https://github.com/CocoaPods/Specs</a> 打开这个链接你就会发现，原来我们能使用的，以及我们使用pod search命令能搜索到的所有Pods依赖库都会把它们的podspec文件上传到这个仓库中，也就是说，只有将我们的podspec文件上传到这个仓库中以后，才能成为一个真正的Pods依赖库，别人才能正常使用！ 按照git的规则，要想向别人的仓库中添加文件，必须先fork一份别人的仓库，做完相应地修改后，在push给仓库的原作者，等到作者审核通过，然后合并到原来的仓库中。 流程明白了以后，自然知道该怎么干了：        </p>
<ol>
<li><p>fork一份CocoaPods官方的Specs仓库</p>
<p> 进入到刚才的官方仓库链接中，点击屏幕右上角的fork按钮，如下图：<br> <img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200449390.jpg" alt=""><br> 然后大家会发现自己名下会多一份仓库的分支。比如我的分支为：<br> <img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200450394.jpg" alt="">        </p>
</li>
<li><p>将fork的仓库clone到本地<br> 执行以下命令：        </p>
<blockquote>
<p>$ git clone <a href="https://github.com/wangzz/Specs.git" target="_blank" rel="external">https://github.com/wangzz/Specs.git</a>        </p>
</blockquote>
<p> 注意，大家需要将对应的仓库地址换成自己的。 这个仓库有点大，需要有耐心啊。</p>
</li>
<li>将自己的podspec文件添加到本地Specs仓库中<br> Specs仓库clone到本地后，会放到一个名为Specs的文件夹中。podspec文件在Specs仓库中的保存原则是： Pods依赖库同名文件夹—-&gt;版本号同名文件夹—-&gt;podspec文件 照此原则，我需要在Specs文件夹下建立一个名为WZMarqueeView的文件夹，然后进入到WZMarqueeView文件夹下，建立一个名称为1.0.0的文件夹，最后进入到1.0.0这个文件夹下，并且将之前创建好的WZMarqueeView.podspec文件拷贝进来。 不难理解，如果以后有对WZMarqueeView类的升级，就在WZMarqueeView文件夹下建立对应版本名称的文件夹，用于保存对应版本的podspec文件即可。 这些操作完成后，目录层次结构如下所示：         <blockquote>
<p><img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200450396.jpg" alt="">        </p>
</blockquote>
</li>
<li><p>上传本地Specs仓库中的修改到github仓库<br> 执行以下命令：                </p>
<blockquote>
<p>$ git add -A &amp;&amp; git commit -m “Add WZMarqueeView podspec file”<br>$ git push origin master        </p>
</blockquote>
<p> 成功以后就能在github上自己fork的Specs仓库中看到刚上传的文件了。        </p>
</li>
<li>将在自己fork的Specs上做的修改pull给CocoaPods官方的Specs仓库<br> 进入到自己fork的Specs仓库中，会看到屏幕左上角有一个绿色按钮:<img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200450398.jpg" alt=""><br> 该按钮点进去以后会有如下图所示的界面：<br> <img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200451400.jpg" alt=""><br> 点击图中的绿色Create Pull Request按钮，即可将我们fork的Specs上做的修改pull给CocoaPods官方的Specs仓库。<br> 到这一步后，剩下的工作就只有等了，等待CocoaPods的维护人员审核并将我们pull上去的修改合并到官方的Specs仓库中，这个过程通常会有一天左右的等待时间。如果有任何消息，比如审核不通过，或者审核通过了，CocoaPods官方都会发邮件通知的。 等到审核通过的时候，我们就能在官方的Specs仓库中看到自己上传的文件夹了。</li>
<li>查看审核进度<br> 当然我们也能查看审核进度，打开这个链接：<a href="https://github.com/CocoaPods/Specs/pulls，这里能看到所有的Specs仓库pull请求，如下图：" target="_blank" rel="external">https://github.com/CocoaPods/Specs/pulls，这里能看到所有的Specs仓库pull请求，如下图：</a>         <img src="http://www.it165.net/uploadfile/files/2014/0304/20140304200451402.jpg" alt=""><br> 红圈标识的就是我刚才pull上来的请求，点进去以后就能看到对应的审核进度。</li>
</ol>
<h1 id="六、查看我们自己创建的Pods依赖库">六、查看我们自己创建的Pods依赖库</h1>
<p>如果收到了CocoaPods官方发过来的审核通过邮件以后，你可能很着急的想在自己的电脑上执行pod search命令，看看能不能搜索到自己创建的Pods依赖库。不过你肯定会失望的，因为还需要执行一条命令才能在我们的本地电脑上使用search命令搜索到我们的依赖库：        </p>
<blockquote>
<p>$ pod setup    </p>
</blockquote>
<p>在我的CocoaPods系列教程中的第一篇：CocoaPods详解之——进阶篇中的最后部分介绍过这条命令，它会将所有的Pods依赖库tree跟新到本地。执行完这条命令，再去执行:        </p>
<blockquote>
<p>$ pod search WZMarqueeView    </p>
</blockquote>
<p>就能显示出对应的介绍信息了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>作者：wangzz<br>原文地址：<a href="http://blog.csdn.net/wzzvictory/article/details/20067595" target="_blank" rel="external">http://b]]>
    </summary>
    
      <category term="iOS应用开发之第三方框架" scheme="/about/tags/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[APP被Rejected的各种原因翻译]]></title>
    <link href="/about/2014/11/07/APP%E8%A2%ABRejected%E7%9A%84%E5%90%84%E7%A7%8D%E5%8E%9F%E5%9B%A0%E7%BF%BB%E8%AF%91/"/>
    <id>/about/2014/11/07/APP被Rejected的各种原因翻译/</id>
    <published>2014-11-07T09:30:19.000Z</published>
    <updated>2014-11-07T10:05:58.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Terms_and_conditions（法律与条款）">Terms and conditions（法律与条款）</h4>
<ol>
<li>As a developer of applications for the App Store you are bound by the terms of the Program License Agreement (PLA), Human Interface Guidelines (HIG), and any other licenses or contracts between you and Apple. The following rules and examples are intended to assist you in gaining acceptance for your App in the App Store, not to amend or remove provisions from any other agreement.（作为App Store的应用开发者，你必须接受如下条款：Program License Agreement (PLA)，Human Interface Guidelines (HIG)，以及任何你与apple签订的许可和合同。以下规则和示例是为了协助你的应用更快通过审核上架，而不是修正或取代之前的条款。）    <h4 id="Functionality（功能）">Functionality（功能）</h4>
</li>
<li>Apps that crash will be rejected（存在Crash（崩溃，死机）的应用会被拒。）</li>
<li>Apps that exhibit bugs will be rejected（存在明显bug的应用会被拒。）</li>
<li>Apps that do not perform as advertised by the developer will be rejected（不符合开发者描述的应用会被拒。）</li>
<li>Apps that include undocumented or hidden features inconsistent with the description of the App will be rejected（有未说明或隐藏特性或有悖描述的应用会被拒。）</li>
<li>Apps that use non-public APIs will be rejected（使用非公开API的应用会被拒。）</li>
<li>Apps that read or write data outside its designated container area will be rejected（试图读写非允许范围内的数据的应用会被拒。）</li>
<li>Apps that download code in any way or form will be rejected（试图以任何方式方法下载代码的应用会被拒。）</li>
<li>Apps that install or launch other executable code will be rejected（安装或运行其他可执行代码的应用会被拒。）</li>
<li>Apps that are “beta”, “demo”, “trial”, or “test” versions will be rejected（任何“beta”，“演示（demo）”，“试用（trial）”或“测试（test）”版本的应用会被拒。）</li>
<li>iPhone Apps must also run on iPad without modification, at iPhone resolution, and at 2X iPhone 3GS resolution（iPhone应用必须可以无条件运行在iPad上，支持普通iPhone分辨率和2倍iPhone 3GS分辨率。）</li>
<li>Apps that duplicate Apps already in the App Store may be rejected, particularly if there are many of them, such as fart, burp, flashlight, and Kama Sutra Apps.（任何与App Store中上架应用重复的应用会被拒，尤其是已经有了很多的：如放屁，打嗝，手电照明和爱经。）</li>
<li>Apps that are not very useful, unique, are simply web sites bundled as Apps, or do not provide any lasting entertainment value may be rejected（没有用处的应用，web页面简单组合的应用，或任何哗众取宠，不能提供娱乐价值的应用会被拒。）</li>
<li>Apps that are primarily marketing materials or advertisements will be rejected（纯粹用于市场推广或广告的应用会被拒。）</li>
<li>Apps that are intended to provide trick or fake functionality that are not clearly marked as such will be rejected（有意提供隐蔽或虚假功能，却又不能明显标示的应用会被拒。）</li>
<li>Apps larger than 50MB in size will not download over cellular networks (this is automatically prohibited by the App Store)（大于20MB的应用无法通过蜂窝网络下载安装（App Store自动处理）。）</li>
<li>Multitasking Apps may only use background services for their intended purposes: VoIP, audio playback, location, task completion, local notifications, etc.（多任务应用只允许在后台运行如下相应的服务：VoIP，音频播放，地理位置，任务记录，本地提醒等。）</li>
<li>Apps that browse the web must use the iOS WebKit framework and WebKit Javascript（应用只允许通过iOS WebKit框架和WebKit Javascript访问web页面。）</li>
<li>Apps that encourage excessive consumption of alcohol or illegal substances, or encourage minors to consume alcohol or smoke cigarettes, will be rejected（鼓励酗酒，使用违法药物，或诱导未成年人饮酒，吸烟的应用会被拒。）</li>
<li>Apps that provide incorrect diagnostic or other inaccurate device data will be rejected（提供错误的系统信息或设备数据的应用会被拒。）</li>
<li>Developers “spamming” the App Store with many versions of similar Apps will be removed from the iOS Developer Program（通过许多版本的类似应用对App Store造成干扰的开发者会被取消IDP身份。）</li>
<li>Apps that are simply a song or movie should be submitted to the iTunes store. Apps that are simply a book should be submitted to the iBookstore.（歌曲和电影应该提交到iTunes store。书籍应该提交到iBookstore。）</li>
<li>Apps that arbitrarily restrict which users may use the App, such as by location or carrier, may be rejected（随意通过位置或运营商来限制用户使用的应用会被拒。）</li>
<li>Apps must follow the iOS Data Storage Guidelines or they will be rejected（加入iCloud支持后，应用必须遵守iOS数据存储指南（ iOS Data Storage Guidelines）否则将被拒。）</li>
<li>Apps that are offered in Newsstand must comply with schedules 1, 2 and 3 of the Developer Program License Agreement or they will be rejected（在Newsstand里提交的应用必须遵守Developer Program License Agreement的第1,2和3条，否则将被拒。）</li>
<li>Apps that display Apps other than your own for purchase or promotion in a manner similar to or confusing with the App Store will be rejected（与App Store类似的推荐或为其他应用做广告的应用将无法通过App Store审核。）</li>
</ol>
<h4 id="Metadata_(name,_descriptions,_ratings,_rankings,_etc)（描述数据（名称，描述，评级，分类等））">Metadata (name, descriptions, ratings, rankings, etc)（描述数据（名称，描述，评级，分类等））</h4>
<ol>
<li>Apps or metadata that mentions the name of any other mobile platform will be rejected（应用或者元数据中提到其他任意移动平台会被拒。）</li>
<li>Apps with placeholder text will be rejected（描述数据有未填写项，存留占位符文本会被拒。）</li>
<li>Apps with descriptions not relevant to the application content and functionality will be rejected（描述中提到与应用内容和功能无关信息会被拒。）</li>
<li>App names in iTunes Connect and as displayed on a device should be similar, so as not to cause confusion（应用在iTunes Connect与设备上显示的名称应该类似，否则会造成混淆。）</li>
<li>Small and large App icons should be similar, so as to not to cause confusion（不同尺寸的icon要一致，否则会造成混淆。）</li>
<li>Apps with App icons and screenshots that do not adhere to the 4+ age rating will be rejected（图标与截屏不符合4+年龄评级的应用会被拒。）</li>
<li>Apps with Category and Genre selections that are not appropriate for the App content will be rejected（应用的内容与所选分类和风格不符会被拒。）</li>
<li>Developers are responsible for assigning appropriate ratings to their Apps. Inappropriate ratings may be changed/deleted by Apple（开发者有责任把应用放到恰当的分级（Rating）。不恰当的评级可能会被Apple修改，甚至删除。）</li>
<li>Developers are responsible for assigning appropriate keywords for their Apps. Inappropriate keywords may be changed/deleted by Apple（开发者有责任给应用撰写恰当的关键词。不恰当的关键词可能会被Apple修改，甚至删除。）</li>
<li>Developers who attempt to manipulate or cheat the user reviews or chart ranking in the App Store with fake or paid reviews, or any other inappropriate methods will be removed from the iOS Developer Program（通过伪造，付费评价或其他非正规手段，获取App Store中较好的评价与星级的开发者会被取消IDP身份。）</li>
<li>Apps which recommend that users restart their iOS device prior to installation or launch may be rejected（任何提示需要用户重启iOS设备来安装或运行的应用会被拒。）</li>
<li>Apps should have all included URLs fully functional when you submit it for review, such as support and privacy policy URLs（应用在提交审核过程中，所有涉及到的URL都要处于正常运行状态，例如保密协议，相关支持页面等。）</li>
</ol>
<h4 id="Location（位置）">Location（位置）</h4>
<ol>
<li>Apps that do not notify and obtain user consent before collecting, transmitting, or using location data will be rejected（未提示用户且获得用户允许之前收集，传输或使用位置数据的应用会被拒。）</li>
<li>Apps that use location-based APIs for automatic or autonomous control of vehicles, aircraft, or other devices will be rejected（使用location-based API来自动控制车辆，飞行器或其他设备的应用会被拒。）</li>
<li>Apps that use location-based APIs for dispatch, fleet management, or emergency services will be rejected（使用location-based API进行调度，队伍管理或应急服务的而应用会被拒。）</li>
<li>Location data can only be used when directly relevant to the features and services provided by the App to the user or to support approved advertising uses（位置数据只能用于应用提供的直接相关功能或服务，或者有授权的广告。）</li>
</ol>
<h4 id="Push_notifications（提醒推送）">Push notifications（提醒推送）</h4>
<ol>
<li>Apps that provide Push Notifications without using the Apple Push Notification (APN) API will be rejected（不使用Apple Push Notification（APN） API提供消息推送的应用会被拒。）</li>
<li>Apps that use the APN service without obtaining a Push Application ID from Apple will be rejected（使用APN服务却没从Apple获取一个Push Application ID的应用会被拒。）</li>
<li>Apps that send Push Notifications without first obtaining user consent will be rejected（在首次推送消息之前未取得的用户允许的应用会被拒。）</li>
<li>Apps that send sensitive personal or confidential information using Push Notifications will be rejected（使用提醒推送服务推送敏感的个人或机密信息的应用会被拒。）</li>
<li>Apps that use Push Notifications to send unsolicited messages, or for the purpose of phishing or spamming will be rejected（使用提醒推送发送主动消息，欺骗或干扰信息的应用会被拒。）</li>
<li>Apps cannot use Push Notifications to send advertising, promotions, or direct marketing of any kind（应用不可以使用提醒推送发送广告，活动或任何形式的直接推广信息。）</li>
<li>Apps cannot charge users for use of Push Notifications（应用不可以提供收费的提醒推送服务。）</li>
<li>Apps that excessively use the network capacity or bandwidth of the APN service or unduly burden a device with Push Notifications will be rejected（使用APN服务过度占用网络带宽或容量或通过提醒推送大量占用系统资源的应用会被拒。）</li>
<li>Apps that transmit viruses, files, computer code, or programs that may harm or disrupt the normal opera tion of the APN service will be rejected（传输病毒，文件，代码或程序，导致破坏或扰乱正常的APN服务操作的应用会被拒。）</li>
</ol>
<h4 id="Game_Center（游戏中心）">Game Center（游戏中心）</h4>
<ol>
<li>Apps that display any Player ID to end users or any third party will be rejected（向终端用户或第三方展示Player ID的应用会被拒。）</li>
<li>Apps that use Player IDs for any use other than as approved by the Game Center terms will be rejected（Player ID被用于Game Center条款款意外的用途的应用会被拒。）</li>
<li>Developers that attempt to reverse lookup, trace, relate, associate, mine, harvest, or otherwise exploit Player IDs, alias, or other information obtained through the Game Center will be removed from the iOS Developer Program（试图通过Game Center反查，跟踪，描述，关联，发掘，收割，或利用Player ID，别名或其他信息的开发者会被取消IDP身份。）</li>
<li>Game Center information, such as Leaderboard scores, may only be used in Apps approved for use with the Game Center（Game Center信息，例如Leaderboard得分，只能通过Game Center用于应用中。）</li>
<li>Apps that use Game Center service to send unsolicited messages, or for the purpose of phishing or spamming will be rejected（使用Game Center发送主动消息，欺骗或干扰信息的应用会被拒。）</li>
<li>Apps that excessively use the network capacity or bandwidth of the Game Center will be rejected（使用Game Center过度占用网络带宽或容量的应用会被拒。）</li>
<li>Apps that transmit viruses, files, computer code, or programs that may harm or disrupt the normal operation of the Game Center service will be rejected（传输病毒，文件，代码或程序，导致破坏或扰乱正常的Game Center操作的应用会被拒。）</li>
</ol>
<h4 id="Advertising（广告）">Advertising（广告）</h4>
<ol>
<li>Apps that artificially increase the number of impressions or click-throughs of ads will be rejected（人工刷广告浏览或点击率的应用会被拒。）</li>
<li>Apps that contain empty iAd banners will be rejected（带有空iAd banner广告的应用会被拒。）</li>
<li>Apps that are designed predominantly for the display of ads will be rejected（设计主要用来展示广告的应用会被拒。）</li>
</ol>
<h4 id="Trademarks_and_trade_dress（商标权与商标外观）">Trademarks and trade dress（商标权与商标外观）</h4>
<ol>
<li>Apps must comply with all terms and conditions explained in the Guidelines for Using Apple Trademarks and Copyrights and the Apple Trademark List（应用必须遵守Guidelines for Using Apple Trademarks and Copyrights 和Apple Trademark List中描述的所有条款和条件。）</li>
<li>Apps that suggest or infer that Apple is a source or supplier of the App, or that Apple endorses any particular representation regarding quality or functionality will be rejected（任何误导或暗示Apple为该应用来源或提供商，或Apple以任何形式认可其质量或功能的应用会被拒。）</li>
<li>Apps which appear confusingly similar to an existing Apple product or advertising theme will be rejected（外观与现有Apple产品或广告主题类似或混淆的应用会被拒）</li>
<li>Apps that misspell Apple product names in their App name (i.e., GPS for Iphone, iTunz) will be rejected（应用名称中出现错误的Apple产品拼写（如，GPS for IPhone， iTunz）的应用会被拒。）</li>
<li>Apps may not use protected third party material such as trademarks, copyrights, patents or violate 3rd party terms of use. Authorization to use such material must be provided upon request.（使用受保护的第三方资源（商标，版权，商业机密，以及其他私有内容），如果要求请提供一份文本形式的使用授权。）</li>
</ol>
<h4 id="Media_content（媒体内容）">Media content（媒体内容）</h4>
<ol>
<li>Apps that do not use the MediaPlayer framework to access media in the Music Library will be rejected（使用MediaPlayer框架以外的方法访问Music Library中媒体数据的应用会被拒。）</li>
<li>App user interfaces that mimic any iPod interface will be rejected（用户界面模仿任何iPod界面的应用会被拒。）</li>
<li>Audio streaming content over a cellular network may not use more than 5MB over 5 minutes（通过蜂窝网络传输的流媒体音频内容不得超过5MB或多余5分钟。）</li>
<li>Video streaming content over a cellular network longer than 10 minutes must use HTTP Live Streaming and include a baseline 64 kbps audio-only HTTP Live stream（通过蜂窝网络传输超过10分钟流媒体视频内容，必须使用HTTP Live Streaming，并包含一条基线64kbps的音频HTTP Live流。）</li>
</ol>
<h4 id="User_interface（用户界面）">User interface（用户界面）</h4>
<ol>
<li>Apps must comply with all terms and conditions explained in the Apple iOS Human Interface Guidelines（应用必须遵守Apple iOS Human Interface Guidelines中的所有条款和条件。</li>
<li>Apps that look similar to Apps bundled on the iPhone, including the App Store, iTunes Store, and iBookstore, will be rejected（ 外观与iPhone自带应用（如：App Store，iTunes Store和iBookstore）相似的应用会被拒。）</li>
<li>Apps that do not use system provided items, such as buttons and icons, correctly and as described in the Apple iOS Human Interface Guidelines may be rejected（不按照Apple iOS Human Interface Guidelines中的描述正确使用系统控件比如按钮，图标等的应用会被拒。）</li>
<li>Apps that create alternate desktop/home screen environments or simulate multi-App widget experiences will be rejected（试图创建多桌面/主屏环境或模拟多Widget应用工具的应用会被拒。）</li>
<li>Apps that alter the functions of standard switches, such as the Volume Up/Down and Ring/Silent switches, will be rejected（ 修改标准开关标准功能例如：音量增加／减少，响铃／震动的应用会被拒。）</li>
<li>Apple and our customers place a high value on simple, refined, creative, well thought through interfaces. They take more work but are worth it. Apple sets a high bar. If your user interface is complex or less than very good, it may be rejected（Apple和我们的用户都界面报以很高期望，希望他设计的超级简洁，精致，充满创造力，深思熟虑。做到这些确实会消耗很多精力，但是值得。Apple在这方面要求非常高。如果你的用户界面过于复杂，甚至仅仅是不够好，都可能被拒。）</li>
</ol>
<h4 id="Purchasing_and_currencies（购买与流通货币）">Purchasing and currencies（购买与流通货币）</h4>
<ol>
<li>Apps that unlock or enable additional features or functionality with mechanisms other than the App Store will be rejected（通过App Store以外的渠道解锁或开启附加属性或功能的应用会被拒。）</li>
<li>Apps utilizing a system other than the In-App Purchase API (IAP) to purchase content, functionality, or services in an App will be rejected（ 使用In App Purchase API (IAP)以外的系统提供购买内容，功能或服务的应用会被拒。）</li>
<li>Apps using IAP to purchase physical goods or goods and services used outside of the application will be rejected（使用IAP为与应用无关的实体商品或商品服务收费的应用会被拒。）</li>
<li>Apps that use IAP to purchase credits or other currencies must consume those credits within the application（应用使用IAP购买积分（Credit）或其他货币，必须在应用中消费。）</li>
<li>Apps that use IAP to purchase credits or other currencies that expire will be rejected（使用IAP购买的积分（Credit）或货币会过期的应用会被拒）</li>
<li>Content subscriptions using IAP must last a minimum of 7 days and be available to the user from all of their iOS devices（ 使用IAP收费订阅的内容至少要在7天内有效，而且允许在所有iOS设备间共享。）</li>
<li>Apps that use IAP to purchase items must assign the correct Purchasability type（用到IAP收费项目的应用必须分派到正确的收费类目中。）</li>
<li>Apps that use IAP to purchase access to built-in capabilities provided by iOS, such as the camera or the gyroscope, will be rejected（ 使用IAP向用户收费以获取iOS内建功能（如摄像头，陀螺仪）的应用会被拒。）</li>
<li>Apps containing “rental” content or services that expire after a limited time will be rejected（ 包含“出租”内容或服务的应用，在一段时间实效的会被拒。）</li>
<li>Insurance applications must be free, in legal-compliance in the regions distributed, and cannot use IAP（保险类应用必须免费，遵守发布地区的法律，并且不允许使用IAP。）</li>
<li>In general, the more expensive your App, the more thoroughly we will review it（一般来说，越贵的应用审核就越仔细彻底。）</li>
<li>Apps offering subscriptions must do so using IAP, Apple will share the same 70/30 revenue split with developers for these purchases, as set forth in the Developer Program License Agreement.（提供收费订阅的应用必须使用IAP，Apple将会按照Developer Program License Agreement中约定的70/30的比例与开发者分账。）</li>
<li>Apps that link to external mechanisms for purchases or subscriptions to be used in the App, such as a “buy” button that goes to a web site to purchase a digital book, will be rejected（应用中如果提供了IAP以外的收费或订阅机制，如：“buy”按钮，跳转到一个购买电子书的web页面，会被拒。）</li>
<li>Apps can read or play approved content (specifically magazines, newspapers, books, audio, music, and video) that is subscribed to or purchased outside of the App, as long as there is no button or external link in the App to purchase the approved content. Apple will not receive any portion of the revenues for approved content that is subscribed to or purchased outside of the App（ 应用可以阅读或播放任何在应用以外取得授权的内容（包括指定的杂志，报纸，书籍，音频，音乐和视频），只要在应用中不允许出现获取授权的收费链接或按钮。Apple不会对在应用外订阅或购买授权项目收取任何费用。）</li>
<li>Apps may only use auto renewing subscriptions for periodicals (newspapers, magazines), business Apps (enterprise, productivity, professional creative, cloud storage) and media Apps (video, audio, voice), or the App will be rejected.（应用只能自动更新订阅的期刊（报纸、杂志），自动更新商业应用（企业、生产力、专业创意、云存储）和媒体应用（视频、音频，声音）将被拒绝。）</li>
</ol>
<h4 id="Scraping_and_aggregation（抓去与整合）">Scraping and aggregation（抓去与整合）</h4>
<ol>
<li>Applications that scrape any information from Apple sites (for example from apple.com, iTunes Store, App Store, iTunes Connect, Apple Developer Programs, etc) or create rankings using content from Apple sites and services will be rejected（从Apple的页面（如：apple.com, iTunes Store, App Store, iTunes Connect, Apple Developer Programs, 等）抓取内容，或利用Apple页面和服务中的内容进行排名的应用会被拒。）</li>
<li>Applications may use approved Apple RSS feeds such as the iTunes Store RSS feed（ 应用可以使用授权的Apple RSS，例如iTunes Store RSS。）</li>
<li>Apps that are simply web clippings, content aggregators, or a collection of links, may be rejected（简单的web页面裁剪，内容整合或链接收集应用会被拒。）</li>
</ol>
<h4 id="Damage_to_device（损害设备）">Damage to device（损害设备）</h4>
<ol>
<li>Apps that encourage users to use an Apple Device in a way that may cause damage to the device will be rejected（任何怂恿用户做出可能损坏Apple设备的行为的应用会被拒。）</li>
<li>Apps that rapidly drain the device’s battery or generate excessive heat will be rejected（快速耗光设备电量或产生大量热量的应用会被拒。）</li>
</ol>
<h4 id="Personal_attacks（人身攻击）">Personal attacks（人身攻击）</h4>
<ol>
<li>Any App that is defamatory, offensive, mean-spirited, or likely to place the targeted individual or group in harms way will be rejected（ 任何涉嫌诽谤，侮辱，狭隘内容或打击个人或团体的应用会被拒。）</li>
<li>Professional political satirists and humorists are exempt from the ban on offensive or mean-spirited commentary（职业政治讽刺家和幽默作家不受该诽谤和狭隘条款约束。）</li>
</ol>
<h4 id="Violence（暴力）">Violence（暴力）</h4>
<ol>
<li>Apps portraying realistic images of people or animals being killed or maimed, shot, stabbed, tortured or injured will be rejected（展示人或动物被杀戮，致残，枪击，针刺或其他伤害的真实图片的应用会被拒）<br>15.2. Apps that depict violence or abuse of children will be rejected（描述暴力或虐待儿童的应用会被拒。）</li>
<li>“Enemies” within the context of a game cannot solely target a specific race, culture, a real government or corporation, or any other real entity（游戏中的“敌人”不能单独的设定为某特定比赛，文化，真实的政府或组织，或者任何现实事物。） </li>
<li>Apps involving realistic depictions of weapons in such a way as to encourage illegal or reckless use of such weapons will be rejected（含有以鼓励非法或鲁莽使用的方式描述真实武器的应用会被拒。）</li>
<li>Apps that include games of Russian roulette will be rejected（ 带有俄罗斯轮盘游戏的应用会被拒。）</li>
</ol>
<h4 id="Objectionable_content（负面内容）">Objectionable content（负面内容）</h4>
<ol>
<li>Apps that present excessively objectionable or crude content will be rejected（介绍过度三俗和粗鲁内容的应用会被拒。）</li>
<li>Apps that are primarily designed to upset or disgust users will be rejected（设计来惹怒或恶心用户的应用会被拒。）</li>
</ol>
<h4 id="Privacy（隐私）">Privacy（隐私）</h4>
<ol>
<li>Apps cannot transmit data about a user without obtaining the user’s prior permission and providing the user with access to information about how and where the data will be used（在未获得用户事先允许，或未告知用户信息将被如何，在哪里使用的情况下，应用不可以传输用户数据。）</li>
<li>Apps that require users to share personal information, such as email address and date of birth, in order to function will be rejected（要求用户提供个人信息，如邮箱地址，生日等，才能使用其功能的应用会被拒。）</li>
<li><p>Apps that target minors for data collection will be rejected（专门收集未成年人数据的应用会被拒。） </p>
<h4 id="Pornography（色情）">Pornography（色情）</h4>
</li>
<li><p>Apps containing pornographic material, defined by Webster’s Dictionary as “explicit descriptions or displays of sexual organs or activities intended to stimulate erotic rather than aesthetic or emotional feelings”, will be rejected（含有韦氏词典中定义的色情素材（explicit descriptions or displays of sexual organs or activities intended to stimulate erotic rather than aesthetic or emotional feelings）的应用会被拒。）</p>
</li>
<li>Apps that contain user generated content that is frequently pornographic (ex “Chat Roulette” Apps) will be rejected（经常有用户提供色情内容（例如：Chat Roulette <a href="http://en.wikipedia.org/wiki/Chatroulette" target="_blank" rel="external">http://en.wikipedia.org/wiki/Chatroulette</a> ）的应用会被拒。）</li>
</ol>
<h4 id="Religion,_culture,_and_ethnicity（信仰，文化和种族）">Religion, culture, and ethnicity（信仰，文化和种族）</h4>
<ol>
<li>Apps containing references or commentary about a religious, cultural or ethnic group that are defamatory, offensive, mean-spirited or likely to expose the targeted group to harm or violence will be rejected（带有对一种信仰，文化或种族进行诽谤，侮辱，狭隘，或以他们为目标的暴力或伤害内容的应用会被拒。）</li>
<li>Apps may contain or quote religious text provided the quotes or translations are accurate and not misleading. Commentary should be educational or informative rather than inflammatory（ 应用若带有或应用对一种信仰的文字描述，那么这个引用或翻译必须是精确，无歧义的。注释内容可以具有教育性，信息性，但不可以为煽动性。）</li>
</ol>
<h4 id="Contests,_sweepstakes,_lotteries,_and_raffles（竞赛，赌博，彩票和抽奖）">Contests, sweepstakes, lotteries, and raffles（竞赛，赌博，彩票和抽奖）</h4>
<ol>
<li>Sweepstakes and contests must be sponsored by the developer/company of the App（赌博和竞赛必须是由应用开发者或所有公司发起资助的。）</li>
<li>Official rules for sweepstakes and contests, must be presented in the App and make it clear that Apple is not a sponsor or involved in the activity in any manner（ 应用中必须展示赌博和竞赛的官方条款，并声明Apple不是资助者，并且在任何情况下与此事无关。）</li>
<li>It must be permissible by law for the developer to run a lottery App, and a lottery App must have all of the following characteristics: consideration, chance, and a prize（开发者必须经过法律允许才能上线一款抽奖应用，而且抽奖应用必须具备以下要素：报酬，机会，和奖金。)</li>
<li>Apps that allow a user to directly purchase a lottery or raffle ticket in the App will be rejected（直接允许用户在应用中购买彩票或抽奖的应用会被拒。）</li>
</ol>
<h4 id="Charities_and_contributions（慈善与捐助）">Charities and contributions（慈善与捐助）</h4>
<ol>
<li>Apps that include the ability to make donations to recognized charitable organizations must be free（含有向已认证的慈善机构捐助功能的应用必须是免费的。）</li>
<li>The collection of donations must be done via a web site in Safari or an SMS（慈善募捐必须通过短信息或通过Safari访问web页面完成。）</li>
</ol>
<h4 id="Legal_requirements（法律要求）">Legal requirements（法律要求）</h4>
<ol>
<li>Apps must comply with all legal requirements in any location where they are made available to users. It is the developer’s obligation to understand and conform to all local laws（应用必须遵守所有发布地区当地法律。开发者有义务了解和遵守各地的法律。）</li>
<li>Apps that contain false, fraudulent or misleading representations or use names or icons similar to other Apps will be rejected（ 任何带有虚假，欺诈和带有歧义的内容的应用会被拒。）</li>
<li>Apps that solicit, promote, or encourage criminal or clearly reckless behavior will be rejected（ 任何召集，推销和股东犯罪和鲁莽行为的应用会被拒。）</li>
<li>Apps that enable illegal file sharing will be rejected（非法文件共享应用会被拒。）</li>
<li>Apps that are designed for use as illegal gambling aids, including card counters, will be rejected（任何设计用来非法赌博工具，包括算牌的应用会被拒。）<br>6 Apps that enable anonymous or prank phone calls or SMS/MMS messaging will be rejected（ 提供知识拨打电话或知识发送短消息/彩信功能的应用会被拒。）</li>
<li>Developers who create Apps that surreptitiously attempt to discover user passwords or other private user data will be removed from the iOS Developer Program（任何开发暗中获取用户密码和私有数据的开发者会被取消IDP身份。）</li>
<li>Apps which contain DUI checkpoints that are not published by law enforcement agencies, or encourage and enable drunk driving, will be rejected（任何非法律执行部门发布的带有DUI检查点信息，或鼓励且协助酒后驾车的应用会被拒。）</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Terms_and_conditions（法律与条款）">Terms and conditions（法律与条款）</h4>
<ol>
<li>As a developer of applications for the App Store you are boun]]>
    </summary>
    
      <category term="iOS应用开发之app上架" scheme="/about/tags/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8Bapp%E4%B8%8A%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[个人博客搞定了]]></title>
    <link href="/about/2014/10/29/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%9E%E5%AE%9A%E4%BA%86/"/>
    <id>/about/2014/10/29/个人博客搞定了/</id>
    <published>2014-10-29T08:48:32.000Z</published>
    <updated>2014-10-29T08:48:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="在此感谢:">在此感谢:</h2>
<blockquote>
<p><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785" target="_blank" rel="external">http://blog.csdn.net/poem_of_sunshine/article/details/29369785</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="在此感谢:">在此感谢:</h2>
<blockquote>
<p><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785" target="_blank" rel="exte]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS8的APP移交流程]]></title>
    <link href="/about/2014/10/23/iOS8%E7%9A%84APP%E7%A7%BB%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
    <id>/about/2014/10/23/iOS8的APP移交流程/</id>
    <published>2014-10-23T06:49:00.000Z</published>
    <updated>2014-10-30T10:47:12.000Z</updated>
    <content type="html"><![CDATA[<p>1.<br><img src="http://img.blog.csdn.net/20141023144103953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>2.<img src="http://img.blog.csdn.net/20141023144543715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>3.<img src="http://img.blog.csdn.net/20141023144113093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>4.<img src="http://img.blog.csdn.net/20141023144117343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>5.<img src="http://img.blog.csdn.net/20141023144121953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>6.<br><img src="http://img.blog.csdn.net/20141023144601749?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>7.<br><img src="http://img.blog.csdn.net/20141023144607599?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>8.<img src="http://img.blog.csdn.net/20141023144615336?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>9.最后补充附加信息提交就可以了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.<br><img src="http://img.blog.csdn.net/20141023144103953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fo]]>
    </summary>
    
      <category term="iOS8" scheme="/about/tags/iOS8/"/>
    
      <category term="iOS应用开发之app上架" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8Bapp%E4%B8%8A%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS生成特定形状、彩色的二维码]]></title>
    <link href="/about/2014/10/20/iOS%E7%94%9F%E6%88%90%E7%89%B9%E5%AE%9A%E5%BD%A2%E7%8A%B6%E3%80%81%E5%BD%A9%E8%89%B2%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>/about/2014/10/20/iOS生成特定形状、彩色的二维码/</id>
    <published>2014-10-20T08:16:00.000Z</published>
    <updated>2014-10-30T10:47:12.000Z</updated>
    <content type="html"><![CDATA[<p>Git地址：<a href="https://github.com/smallMas/FMTQRCode" target="_blank" rel="external">https://github.com/smallMas/FMTQRCode</a><br>可惜没有生成中间带有logo的二维码</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Git地址：<a href="https://github.com/smallMas/FMTQRCode" target="_blank" rel="external">https://github.com/smallMas/FMTQRCode</a><br>可惜没有生成中]]>
    </summary>
    
      <category term="二维码" scheme="/about/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
      <category term="ios" scheme="/about/tags/ios/"/>
    
      <category term="iOS应用开发之第三方框架" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CoreData+MagicalRecord的使用]]></title>
    <link href="/about/2014/10/15/CoreData+MagicalRecord%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>/about/2014/10/15/CoreData+MagicalRecord的使用/</id>
    <published>2014-10-15T02:54:00.000Z</published>
    <updated>2014-10-30T10:47:12.000Z</updated>
    <content type="html"><![CDATA[<p>1.首先导入文件，地址：<a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" rel="external">https://github.com/magicalpanda/MagicalRecord</a><br>2.然后创建xcdatamodeld和实例对象，如下图<br><img src="http://img.blog.csdn.net/20141015103725687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>不会创建的话请参照我的另一份文章：<a href="http://blog.csdn.net/yin_xianwei/article/details/20618755" target="_blank" rel="external">http://blog.csdn.net/yin_xianwei/article/details/20618755</a><br>3.导入头文件，大家都会</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import <span class="title">"CoreData+MagicalRecord.h"</span></span></div></pre></td></tr></table></figure>

<p>4.在appdelgate创建数据库</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[MagicalRecord setupCoreDataStackWithStoreNamed:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.sqlite"</span>, <span class="string">@"Test"</span>]];</div></pre></td></tr></table></figure>

<p>5.启动应用之后你会在你的模拟器沙盒路径下的Library/Application Support/工程名/  下看到数据库文件（iOS7）<br>6.接下来就是操作它了<br>你的Entity会有这些方法<br>6.1查找</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//查找所有</span></div><div class="line">   <span class="built_in">NSArray</span> *ary1 = [DogEntity MR_findAll];</div><div class="line">    </div><div class="line">    <span class="comment">//查找并按name升序排序</span></div><div class="line">  <span class="built_in">NSArray</span> *ary2 = [DogEntity MR_findAllSortedBy:<span class="string">@"name"</span> ascending:<span class="literal">YES</span>]; <span class="comment">//查找type为2的数据</span></div><div class="line">   <span class="built_in">NSArray</span> *ary3 = [DogEntity MR_findByAttribute:<span class="string">@"type"</span> withValue:<span class="string">@"2"</span>];</div><div class="line"><span class="comment">//查找第一条数据</span></div><div class="line">	 DogEntity *entyty = [DogEntity MR_findFirst];</div></pre></td></tr></table></figure>


<p>6.2增加</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DogEntity *dog = [DogEntity MR_createEntity];</div><div class="line"></div><div class="line">dog<span class="variable">.name</span> = <span class="string">@"huahua"</span>;</div><div class="line">dog<span class="variable">.type</span> = <span class="string">@"2"</span>;</div><div class="line">[[NSManagedObjectContext MR_defaultContext] MR_saveToPersistentStoreAndWait];</div></pre></td></tr></table></figure>

<p>6.3更新</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *ary = [DogEntity MR_findAll];</div><div class="line"></div><div class="line">  DogEntity *dog = [ary lastObject];</div><div class="line">     dog<span class="variable">.name</span> = <span class="string">@"hhhhhh"</span>;</div><div class="line">     [[NSManagedObjectContext MR_defaultContext] MR_saveToPersistentStoreAndWait];</div></pre></td></tr></table></figure>

<p>6.4删除</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *ary = [DogEntity MR_findAll];</div><div class="line"></div><div class="line">     DogEntity *dog = [ary lastObject];</div><div class="line">     [dog MR_deleteEntity];</div><div class="line">     [[NSManagedObjectContext MR_defaultContext] MR_saveToPersistentStoreAndWait];</div></pre></td></tr></table></figure>

<p>7.那么问题来了，你会发现所有的操作都会有一个MR_前缀（反正我觉得挺cool的），想要去掉的话就这样导入头文件：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#define MR_SHORTHAND</span></div><div class="line"><span class="preprocessor">#import <span class="title">"CoreData+MagicalRecord.h"</span></span></div></pre></td></tr></table></figure>

<p>8.有一些常用的方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">根据某个属性某个条件查询</div><div class="line"><span class="built_in">NSArray</span> *dogs = [DogEntity MR_findByAttribute:<span class="string">@"name"</span> withValue:<span class="string">@"Y.X."</span>];</div><div class="line"></div><div class="line">根据排序取得搜索结果</div><div class="line"><span class="built_in">NSArray</span> *dogs = [DogEntity MR_findAllSortedBy:<span class="string">@"name"</span> ascending:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>



<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    查询所有记录</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAll;</div><div class="line"><span class="comment">//根据上下文句柄查询所有记录</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllInContext:(NSManagedObjectContext *)context;</div><div class="line"><span class="comment">//根据某个属性排序查询所有记录</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllSortedBy:(<span class="built_in">NSString</span> *)sortTerm ascending:(<span class="built_in">BOOL</span>)ascending;</div><div class="line"><span class="comment">//根据某个属性排序以及上下文操作句柄查询所有记录</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllSortedBy:(<span class="built_in">NSString</span> *)sortTerm ascending:(<span class="built_in">BOOL</span>)ascending inContext:(NSManagedObjectContext *)context;</div><div class="line"><span class="comment">//根据某个属性排序用谓词来查询记录</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllSortedBy:(<span class="built_in">NSString</span> *)sortTerm ascending:(<span class="built_in">BOOL</span>)ascending withPredicate:(NSPredicate *)searchTerm;</div><div class="line"><span class="comment">//根据某个属性排序以及上下文操作句柄用谓词来查询记录</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllSortedBy:(<span class="built_in">NSString</span> *)sortTerm ascending:(<span class="built_in">BOOL</span>)ascending withPredicate:(NSPredicate *)searchTerm inContext:(NSManagedObjectContext *)context;</div><div class="line"><span class="comment">//根据谓词查询</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllWithPredicate:(NSPredicate *)searchTerm;</div><div class="line"><span class="comment">//根据谓词以及上下文操作句柄来查询</span></div><div class="line">+ (<span class="built_in">NSArray</span> *) MR_findAllWithPredicate:(NSPredicate *)searchTerm inContext:(NSManagedObjectContext *)context;</div><div class="line"><span class="comment">//以下都是查询一个对象时的操作,与上面重复,不一一赘述</span></div><div class="line">+ (instancetype) MR_findFirst;</div><div class="line">+ (instancetype) MR_findFirstInContext:(NSManagedObjectContext *)context;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchTerm;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchTerm inContext:(NSManagedObjectContext *)context;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchterm sortedBy:(<span class="built_in">NSString</span> *)property ascending:(<span class="built_in">BOOL</span>)ascending;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchterm sortedBy:(<span class="built_in">NSString</span> *)property ascending:(<span class="built_in">BOOL</span>)ascending inContext:(NSManagedObjectContext *)context;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchTerm andRetrieveAttributes:(<span class="built_in">NSArray</span> *)attributes;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchTerm andRetrieveAttributes:(<span class="built_in">NSArray</span> *)attributes inContext:(NSManagedObjectContext *)context;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchTerm sortedBy:(<span class="built_in">NSString</span> *)sortBy ascending:(<span class="built_in">BOOL</span>)ascending andRetrieveAttributes:(<span class="keyword">id</span>)attributes, ...;</div><div class="line">+ (instancetype) MR_findFirstWithPredicate:(NSPredicate *)searchTerm sortedBy:(<span class="built_in">NSString</span> *)sortBy ascending:(<span class="built_in">BOOL</span>)ascending inContext:(NSManagedObjectContext *)context andRetrieveAttributes:(<span class="keyword">id</span>)attributes, ...;</div><div class="line">+ (instancetype) MR_findFirstByAttribute:(<span class="built_in">NSString</span> *)attribute withValue:(<span class="keyword">id</span>)searchValue;</div><div class="line">+ (instancetype) MR_findFirstByAttribute:(<span class="built_in">NSString</span> *)attribute withValue:(<span class="keyword">id</span>)searchValue inContext:(NSManagedObjectContext *)context;</div><div class="line">+ (instancetype) MR_findFirstOrderedByAttribute:(<span class="built_in">NSString</span> *)attribute ascending:(<span class="built_in">BOOL</span>)ascending;</div><div class="line">+ (instancetype) MR_findFirstOrderedByAttribute:(<span class="built_in">NSString</span> *)attribute ascending:(<span class="built_in">BOOL</span>)ascending inContext:(NSManagedObjectContext *)context;</div></pre></td></tr></table></figure>

<p>参考：<a href="http://www.haogongju.net/art/2570005" target="_blank" rel="external">http://www.haogongju.net/art/2570005</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1.首先导入文件，地址：<a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" rel="external">https://github.com/magicalpanda/Magica]]>
    </summary>
    
      <category term="MagicalRecord" scheme="/about/tags/MagicalRecord/"/>
    
      <category term="iOS应用开发之第三方框架" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS十进制分割格式转换]]></title>
    <link href="/about/2014/10/10/iOS%E5%8D%81%E8%BF%9B%E5%88%B6%E5%88%86%E5%89%B2%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>/about/2014/10/10/iOS十进制分割格式转换/</id>
    <published>2014-10-10T08:45:00.000Z</published>
    <updated>2014-10-30T10:47:12.000Z</updated>
    <content type="html"><![CDATA[<p>//@”123456789” 转换后 @”123,456,789”</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">num</span>)</span></div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)money;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span> (<span class="title">num</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)money{</div><div class="line">    </div><div class="line">    NSNumberFormatter *numFormat = [[NSNumberFormatter alloc] init];</div><div class="line">    [numFormat setNumberStyle:NSNumberFormatterDecimalStyle];</div><div class="line">    <span class="built_in">NSNumber</span> *num = [<span class="built_in">NSNumber</span> numberWithDouble:[<span class="keyword">self</span> doubleValue]];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [numFormat stringFromNumber:num];</div><div class="line">}</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>//@”123456789” 转换后 @”123,456,789”</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div cla]]>
    </summary>
    
      <category term="NSString" scheme="/about/tags/NSString/"/>
    
      <category term="iOS应用开发之常用方法" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS ... NS_REQUIRES_NIL_TERMINATION]]></title>
    <link href="/about/2014/10/10/iOS%20...%20NS_REQUIRES_NIL_TERMINATION/"/>
    <id>/about/2014/10/10/iOS ... NS_REQUIRES_NIL_TERMINATION/</id>
    <published>2014-10-10T03:18:00.000Z</published>
    <updated>2014-10-30T10:47:12.000Z</updated>
    <content type="html"><![CDATA[<p>看到官方的一个例子不错，这里留记。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#import <span class="title">&lt;Cocoa/Cocoa.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableArray</span> (<span class="title">variadicMethodExample</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) appendObjects:(<span class="keyword">id</span>) firstObject, ...; <span class="comment">// This method takes a nil-terminated list of objects.</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableArray</span> (<span class="title">variadicMethodExample</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) appendObjects:(<span class="keyword">id</span>) firstObject, ...</div><div class="line">{</div><div class="line"><span class="keyword">id</span> eachObject;</div><div class="line">va_list argumentList;</div><div class="line"><span class="keyword">if</span> (firstObject) <span class="comment">// The first argument isn't part of the varargs list,</span></div><div class="line">  {                                   <span class="comment">// so we'll handle it separately.</span></div><div class="line">  [<span class="keyword">self</span> addObject: firstObject];</div><div class="line">  va_start(argumentList, firstObject); <span class="comment">// Start scanning for arguments after firstObject.</span></div><div class="line">  <span class="keyword">while</span> (eachObject = va_arg(argumentList, <span class="keyword">id</span>)) <span class="comment">// As many times as we can get an argument of type "id"</span></div><div class="line">      [<span class="keyword">self</span> addObject: eachObject]; <span class="comment">// that isn't nil, add it to self's contents.</span></div><div class="line">  va_end(argumentList);</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>

<p>地址：<a href="https://developer.apple.com/library/mac/qa/qa1405/_index.html" target="_blank" rel="external">https://developer.apple.com/library/mac/qa/qa1405/_index.html</a><br>最经常见到的应该是UIAlertView里用的了。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithTitle:(<span class="built_in">NSString</span> *)title message:(<span class="built_in">NSString</span> *)message delegate:(<span class="keyword">id</span> <span class="comment">/*&lt;UIAlertViewDelegate&gt;*/</span>)delegate cancelButtonTitle:(<span class="built_in">NSString</span> *)cancelButtonTitle otherButtonTitles:(<span class="built_in">NSString</span> *)otherButtonTitles, ... NS_REQUIRES_NIL_TERMINATION;</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>看到官方的一个例子不错，这里留记。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div]]>
    </summary>
    
      <category term="UIAlertView" scheme="/about/tags/UIAlertView/"/>
    
      <category term="iOS应用开发之常用方法" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS 向服务器提交Byte数组格式图片]]></title>
    <link href="/about/2014/10/09/iOS%20%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8F%90%E4%BA%A4Byte%E6%95%B0%E7%BB%84%E6%A0%BC%E5%BC%8F%E5%9B%BE%E7%89%87/"/>
    <id>/about/2014/10/09/iOS 向服务器提交Byte数组格式图片/</id>
    <published>2014-10-09T09:37:00.000Z</published>
    <updated>2014-10-30T10:47:12.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"image.png"</span>];</div><div class="line"> NSData *data = UIImagePNGRepresentation(image);</div><div class="line"> <span class="built_in">NSString</span> *byteArray = [data base64Encoding];</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="uiimage" scheme="/about/tags/uiimage/"/>
    
      <category term="bytearray" scheme="/about/tags/bytearray/"/>
    
      <category term="iOS应用开发之网络通讯" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 AFNetworking 通过 POST 方式发送数据]]></title>
    <link href="/about/2014/09/13/%E7%94%A8%20AFNetworking%20%E9%80%9A%E8%BF%87%20POST%20%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>/about/2014/09/13/用 AFNetworking 通过 POST 方式发送数据/</id>
    <published>2014-09-13T07:14:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<p>AFNetworking进行POST请求中 发送json数据有些特别 。<br><strong>AFNetworking 版本为 2.0.2</strong><br>POST 发送数据有两种形式：<br>1、发送纯文本的内容<br>2、发送的 body 部分带有文件（图片，音频或者其他二进制数据）<br>对应的 Content-Type 有两种：<br>1、application/x-www-form-urlencoded<br>2、multipart/form-data<br>传统的使用 POST 的方式发送数据用于上传文件，AFNetworking 中提供了直接的接口：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span><span class="variable">.manager</span> POST:post_url parameters:params</div><div class="line">constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt; formData) {</div><div class="line">    <span class="comment">// 直接以 key value 的形式向 formData 中追加二进制数据</span></div><div class="line">    [formData appendPartWithFormData:[str dataUsingEncoding:NSUTF8StringEncoding] </div><div class="line">              name:<span class="string">@"key1"</span>];</div><div class="line">    [formData appendPartWithFileData:imgData name:<span class="string">@"imagefile"</span> </div><div class="line">              fileName:<span class="string">@"img.jpg"</span> mimeType:<span class="string">@"image/jpeg"</span>];</div><div class="line">    }</div><div class="line">success:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) {</div><div class="line">    <span class="comment">// 成功后的处理</span></div><div class="line">}</div><div class="line">failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) {</div><div class="line">    <span class="comment">// 失败后的处理</span></div><div class="line">}];</div></pre></td></tr></table></figure>

<p>使用 POST 方式发送纯文本内容：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (NSMutableURLRequest *)postRequestWithURL:(<span class="built_in">NSString</span> *)url content:(<span class="built_in">NSString</span> *)text</div><div class="line">{</div><div class="line">    NSMutableURLRequest *request =</div><div class="line">        [[NSMutableURLRequest alloc] initWithURL:url];</div><div class="line">    [request setHTTPMethod:<span class="string">@"POST"</span>];</div><div class="line">    [request setValue:<span class="string">@"application/x-www-form-urlencoded"</span> </div><div class="line">             forHTTPHeaderField:<span class="string">@"Contsetent-Type"</span>];</div><div class="line">    [request setHTTPBody:<span class="number">1</span>];</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> request;</div><div class="line">}</div><div class="line"> </div><div class="line">NSOperation *operation =</div><div class="line">[<span class="keyword">self</span><span class="variable">.manager</span> HTTPRequestOperationWithRequest:request</div><div class="line">success:^(AFHTTPRequestOperation *operation, <span class="keyword">id</span> responseObject) {</div><div class="line">    <span class="comment">// 成功后的处理</span></div><div class="line">}</div><div class="line">failure:^(AFHTTPRequestOperation *operation, <span class="built_in">NSError</span> *error) {</div><div class="line">    <span class="comment">// 失败后的处理</span></div><div class="line">}];</div><div class="line">[<span class="keyword">self</span><span class="variable">.manager</span><span class="variable">.operationQueue</span> addOperation:operation];</div></pre></td></tr></table></figure>


<p>其中 self.manager 为 AFHTTPRequestOperationManager 实例。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_manager = [[AFHTTPRequestOperationManager alloc] initWithBaseURL:url];</div><div class="line"> </div><div class="line"><span class="comment">// 对于网站成功返回 JSON 格式的数据但是却在 failure 回调中显示的，</span></div><div class="line"><span class="comment">// 是因为服务器返回数据的网页中 content type 没有设置为 text/json</span></div><div class="line"><span class="comment">// 对于我们公司的服务器返回的 content type 为 text/html 所以我设置为如下这样，</span></div><div class="line"><span class="comment">// 对于不同的情况可以根据自己的情况设置合适的接受的 content type 的类型</span></div><div class="line">_manager<span class="variable">.responseSerializer</span><span class="variable">.acceptableContentTypes</span> = [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"text/html"</span>];</div></pre></td></tr></table></figure>


<p>本文转自：<a href="http://www.iliunian.com/2879.html" target="_blank" rel="external">http://www.iliunian.com/2879.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AFNetworking进行POST请求中 发送json数据有些特别 。<br><strong>AFNetworking 版本为 2.0.2</strong><br>POST 发送数据有两种形式：<br>1、发送纯文本的内容<br>2、发送的 body 部分带有文件（图片，]]>
    </summary>
    
      <category term="AFNetworking" scheme="/about/tags/AFNetworking/"/>
    
      <category term="iOS应用开发之网络通讯" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xcode5.1制作formework]]></title>
    <link href="/about/2014/08/11/Xcode5.1%E5%88%B6%E4%BD%9Cformework/"/>
    <id>/about/2014/08/11/Xcode5.1制作formework/</id>
    <published>2014-08-11T09:26:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>新建一个工程，选择framework &amp; library - Cocoa Touch Static Library,命名为TestKit。<img src="http://img.blog.csdn.net/20140811170140857?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>删除不必要的文件。TestKitTests 和TestKit target。<br><img src="http://img.blog.csdn.net/20140811170014011?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li>新建一个Bundle 。new-file-target；选择OS X目录下FrameWork&amp;Library中的Bundle,取名为TestiOSKit。<img src="http://img.blog.csdn.net/20140811165819234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
<li><p>删除TestiOSKit中TestiOSKit-Prefix.pch中的#import<cocoa cocoa.h="">。<img src="http://img.blog.csdn.net/20140811170026211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></cocoa></p>
</li>
<li><p>修改target设置Build Settings选项卡：<br>Base SDK选择Latest iOS(iOS 7.1)<br>Build ActiveArchitecture Only选择NO<br>Dead Code Stripping选择NO<br>Mach-O Type选择Relocatable Object File</p>
<pre><code>  <span class="keyword">Link</span> <span class="keyword">With</span> Standard Libraries选择NO
</code></pre><p>Wrapper Extension修改为framework<br>Info选项卡：<br>Bundle OS Type code 修改为FMWK<br>Build Phases选项卡:<br>首先选择Editor-Add Build Phase-Add Copy Haeders Build Phase,在Build Phases下会多出一行Copy Headers;<img src="http://img.blog.csdn.net/20140811170030844?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>点击右下角的Add Build Phases,选择AddCopy Headers. 添加头文件和源文件。<img src="http://img.blog.csdn.net/20140811165835281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>删除系统的Frameworks。(Remove References)</p>
<pre><code>  ![](<span class="symbol">http:</span>/<span class="regexp">/img.blog.csdn.net/</span><span class="number">20140811170100328</span>?watermark/<span class="number">2</span>/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=<span class="regexp">/font/</span><span class="number">5</span>a6L5L2T/fontsize/<span class="number">400</span>/fill/<span class="constant">I0JBQkFCMA</span>==<span class="regexp">/dissolve/</span><span class="number">70</span>/gravity/<span class="constant">SouthEast</span>)
</code></pre></li>
<li><p>在TestKit.h和TestMarkKit.m里面写入你的函数声明和实现<br><img src="http://img.blog.csdn.net/20140811165840218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><img src="http://img.blog.csdn.net/20140811165845062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</li>
</ol>
<ol>
<li>选择Run Scheme<br><img src="http://img.blog.csdn.net/20140811165849625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
</ol>
<ol>
<li>查看framework build路径<br>点击Xcode右上角Organizer,选择Projects选项卡如图，点击箭头可以进入bulid路径。<img src="http://img.blog.csdn.net/20140811170055570?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>或者选择iOS Device运行一下，然后在工程的Products-TestiOSKit.framework右键，show in finder。文件夹下en.lproj和Info.plist都可以直接删除。<br><img src="http://img.blog.csdn.net/20140811170603171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></li>
</ol>
<ol>
<li><p>使用framework<br>只需要在新的工程导入并使用就行啦。<img src="http://img.blog.csdn.net/20140811170859077?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</li>
<li><p>但是我们会遇到一个问题，就是这个framework的包分两个，一个是模拟器，一个是真机，所以我们要把它合并成一个通用的包。</p>
</li>
</ol>
<p>在finder下是这样的：<br><img src="http://img.blog.csdn.net/20140811170913218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>一个是真机，一个是模拟器，下面开始合并。<br>1.先把其中一个framework包放到桌面。<br>2.打开终端运行&gt; lipo -create/Users/Jerry/Library/Developer/Xcode/DerivedData/TestKit-dmdcaxednjyebxgulialinjfjzho/Build/Products/Debug-iphoneos/TestiOSKit.framework/TestiOSKit/Users/Jerry/Library/Developer/Xcode/DerivedData/TestKit-dmdcaxednjyebxgulialinjfjzho/Build/Products/Debug-iphonesimulator/TestiOSKit.framework/TestiOSKit-output /Users/Jerry/Desktop/TestiOSKit</p>
<blockquote>
<p><img src="http://img.blog.csdn.net/20140811172349714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
</blockquote>
<pre><code>说明一下这段代码，红色为固有字段，黑色部分均为路径，前两个是模拟器路径和真机的路径，后面的为输出路径。
3.把输出的文件TestiOSKit替换第一步放在桌面上的framework里的TestiOSKit，然后这个framework就是通用的了。
</code></pre><p>此方法同样适用.a文件的合成。<br>              <img src="http://img.blog.csdn.net/20140811172415984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWluX3hpYW53ZWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<ol>
<li>我把常用的宏定义和类别做成的framework地址：<a href="https://code.csdn.net/yinxianwei88/utilitytools" target="_blank" rel="external">https://code.csdn.net/yinxianwei88/utilitytools</a></li>
<li>本贴参考：<br><a href="http://blog.csdn.net/smking/article/details/24434819" target="_blank" rel="external">http://blog.csdn.net/smking/article/details/24434819</a><br><a href="http://blog.csdn.net/mark_creative/article/details/9450887" target="_blank" rel="external">http://blog.csdn.net/mark_creative/article/details/9450887</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>新建一个工程，选择framework &amp; library - Cocoa Touch Static Library,命名为TestKit。<img src="http://img.blog.csdn.net/20140811170140857?water]]>
    </summary>
    
      <category term="framework" scheme="/about/tags/framework/"/>
    
      <category term="iOS应用开发之Xcode配置" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BXcode%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实现简单的糗百，以下是连接：]]></title>
    <link href="/about/2014/07/21/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%B3%97%E7%99%BE%EF%BC%8C%E4%BB%A5%E4%B8%8B%E6%98%AF%E8%BF%9E%E6%8E%A5%EF%BC%9A/"/>
    <id>/about/2014/07/21/实现简单的糗百，以下是连接：/</id>
    <published>2014-07-21T07:57:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://code.csdn.net/yinxianwei88/swift_qiubai/tree/master" target="_blank" rel="external">https://code.csdn.net/yinxianwei88/swift_qiubai/tree/master</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://code.csdn.net/yinxianwei88/swift_qiubai/tree/master" target="_blank" rel="external">https://code.csdn.net/yinxianwei88/s]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_8_扩展&类别]]></title>
    <link href="/about/2014/07/21/Swift_8_%E6%89%A9%E5%B1%95&%E7%B1%BB%E5%88%AB/"/>
    <id>/about/2014/07/21/Swift_8_扩展&类别/</id>
    <published>2014-07-21T07:45:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line">class People{</div><div class="line">    var name:String?</div><div class="line">    </div><div class="line">}</div><div class="line"><span class="comment">//方法扩展</span></div><div class="line">extension People{</div><div class="line">    func test() -&gt; String{</div><div class="line">        <span class="keyword">return</span> <span class="string">"abc"</span></div><div class="line"></div><div class="line">    }</div><div class="line">    </div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line">let p = People();</div><div class="line"></div><div class="line">var v1 = p<span class="variable">.test</span>();</div><div class="line"></div><div class="line">println(<span class="string">"v1 is \(v1)"</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_7_继承]]></title>
    <link href="/about/2014/07/21/Swift_7_%E7%BB%A7%E6%89%BF/"/>
    <id>/about/2014/07/21/Swift_7_继承/</id>
    <published>2014-07-21T07:44:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line"></div><div class="line">class People {</div><div class="line">    </div><div class="line">    var name:String?</div><div class="line">    </div><div class="line">    init(){</div><div class="line">        <span class="keyword">self</span><span class="variable">.name</span>=<span class="string">"李四"</span></div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="comment">//防止重写关键字 @final</span></div><div class="line">    @final var age = <span class="number">15</span></div><div class="line">}</div><div class="line"></div><div class="line">class Man : People{</div><div class="line">    init(){</div><div class="line">        <span class="keyword">super</span><span class="variable">.init</span>()</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">let p = Man()</div><div class="line"></div><div class="line">p<span class="variable">.name</span> = <span class="string">"张三"</span></div><div class="line"></div><div class="line">println(<span class="string">"p name is \(p.name)"</span>)</div><div class="line"></div><div class="line">let p2 = Man()</div><div class="line"></div><div class="line">println(<span class="string">"p2 name is \(p2.name)"</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_6_方法]]></title>
    <link href="/about/2014/07/21/Swift_6_%E6%96%B9%E6%B3%95/"/>
    <id>/about/2014/07/21/Swift_6_方法/</id>
    <published>2014-07-21T07:43:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line">class Dog {</div><div class="line">    func age() -&gt; String {</div><div class="line">    <span class="keyword">return</span> <span class="string">"2"</span></div><div class="line">    }</div><div class="line">    </div><div class="line">    var name : String?</div><div class="line">    </div><div class="line">    func getName(name1:String) -&gt; String{</div><div class="line">        <span class="keyword">self</span><span class="variable">.name</span> = name1;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.name</span>!</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">let dog = Dog()</div><div class="line"></div><div class="line">var age = dog<span class="variable">.age</span>();</div><div class="line"></div><div class="line"><span class="comment">//dog.name = "小黑"</span></div><div class="line"></div><div class="line">var dogName = dog<span class="variable">.name</span>;</div><div class="line"></div><div class="line">var getName = dog<span class="variable">.getName</span>(<span class="string">"123"</span>)</div><div class="line"></div><div class="line">var name2 = dog<span class="variable">.name</span>;</div><div class="line"></div><div class="line">println(<span class="string">"dog age is \(age) name is \(dogName) getName is \(getName)  name2 is \(name2)"</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_5_类和结构体]]></title>
    <link href="/about/2014/07/21/Swift_5_%E7%B1%BB%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>/about/2014/07/21/Swift_5_类和结构体/</id>
    <published>2014-07-21T07:42:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">class PeopleClass{</div><div class="line"></div><div class="line">    </div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">struct</span> PeopleStruct{</div><div class="line">    </div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Resolution {</div><div class="line">    var width = <span class="number">0</span></div><div class="line">    var heigth = <span class="number">0</span></div><div class="line">}</div><div class="line"></div><div class="line">class VideoMode {</div><div class="line">    var resolution = Resolution()</div><div class="line">    var interlaced = <span class="literal">false</span></div><div class="line">    var frameRate = <span class="number">0.0</span></div><div class="line">    var name : String?</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line">let someResolution = Resolution()</div><div class="line">let someVideoMode = VideoMode()</div><div class="line"></div><div class="line">println(<span class="string">"The width of someResolution is \(someResolution.width)"</span>)</div><div class="line"></div><div class="line">someVideoMode<span class="variable">.resolution</span><span class="variable">.width</span> = <span class="number">12880</span></div><div class="line">println(<span class="string">"The width of someVideoMode is now \(someVideoMode.resolution.width)"</span>)</div><div class="line"></div><div class="line">let vga = Resolution(width:<span class="number">640</span>, heigth: <span class="number">480</span>)</div><div class="line"></div><div class="line">println(<span class="string">"vga is \(vga.width) \(vga.heigth)"</span>)</div><div class="line"></div><div class="line">let hd = Resolution(width: <span class="number">1920</span>, heigth: <span class="number">1080</span>)</div><div class="line">var cinema = hd</div><div class="line">cinema<span class="variable">.width</span> = <span class="number">2048</span></div><div class="line"></div><div class="line"></div><div class="line">println(<span class="string">"cinema is now  \(cinema.width) pixels wide"</span>)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_4_闭包(Blocks)]]></title>
    <link href="/about/2014/07/21/Swift_4_%E9%97%AD%E5%8C%85(Blocks)/"/>
    <id>/about/2014/07/21/Swift_4_闭包(Blocks)/</id>
    <published>2014-07-21T04:56:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">74</span>,<span class="number">2</span>]</div><div class="line"></div><div class="line">func hasClosure(list:[Int], v2:Int, cb:(num:Int, v3:Int) -&gt;Bool)  -&gt;Bool{</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arr{</div><div class="line">        <span class="keyword">if</span>(cb(num:item, v3:v2)){</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div><div class="line"></div><div class="line">var v2 = hasClosure(arr, <span class="number">82</span>, {</div><div class="line">    (num:Int, v3:Int) -&gt;Bool <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> num &gt;= v3;</div><div class="line">    });</div><div class="line">println(<span class="string">"v2 is \(v2)"</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//sort函数  会根据您提供的排序闭包将已知类型数组中的值进行排序。 一旦排序完成，函数会返回一个与原数组大小相同的新数组，该数组中包含已经正确排序的同类型元素</span></div><div class="line">let names = [<span class="string">"Chris"</span>, <span class="string">"Alex"</span>, <span class="string">"Ewa"</span>, <span class="string">"Barry"</span>, <span class="string">"Daniella"</span>]</div><div class="line"></div><div class="line">func backwards(s1: String, s2: String) -&gt; Bool {</div><div class="line">    <span class="keyword">return</span> s1 &gt; s2</div><div class="line">}</div><div class="line"></div><div class="line">var reversed = sort(names, backwards)</div><div class="line"><span class="comment">// reversed is equal to ["Ewa", "Daniella", "Chris", "Barry", "Alex"]</span></div><div class="line"><span class="comment">//闭包版</span></div><div class="line">reversed = sort(names, { (s1: String, s2: String) -&gt; Bool <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> s1 &gt; s2</div><div class="line">    })</div><div class="line"></div><div class="line"><span class="comment">//单行</span></div><div class="line">reversed = sort(names, { (s1: String, s2: String) -&gt; Bool <span class="keyword">in</span> <span class="keyword">return</span> s1 &gt; s2 } )</div><div class="line"></div><div class="line"><span class="comment">//再精简</span></div><div class="line">reversed = sort(names, { s1, s2 <span class="keyword">in</span> s1 &gt; s2 } )</div><div class="line"></div><div class="line"><span class="comment">//极致精简</span></div><div class="line">reversed = sort(names, { $<span class="number">0</span> &gt; $<span class="number">1</span> } )</div><div class="line"></div><div class="line"><span class="comment">//终极精简</span></div><div class="line">reversed = sort(names, &gt;)</div><div class="line"></div><div class="line">println(<span class="string">"reversed is \(reversed)"</span>)</div><div class="line"></div><div class="line"><span class="comment">//闭包表达式</span></div><div class="line"><span class="comment">//{</span></div><div class="line"><span class="comment">//    (parameters) -&gt; returnType in</span></div><div class="line"><span class="comment">//    statements</span></div><div class="line"><span class="comment">//}</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_3_函数]]></title>
    <link href="/about/2014/07/21/Swift_3_%E5%87%BD%E6%95%B0/"/>
    <id>/about/2014/07/21/Swift_3_函数/</id>
    <published>2014-07-21T03:45:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//声明一个函数 不带参数 没有返回值</span></div><div class="line">func func1(){</div><div class="line">    </div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//声明一个函数 传入两个String类型参数 , 没有返回值</span></div><div class="line">func func2(v1:String, v2:String){</div><div class="line">    println(v1 + <span class="string">"and"</span> + v2)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//声明一个求和的函数</span></div><div class="line">func func3(v1:Int, v2:Int) -&gt;Int{</div><div class="line"></div><div class="line">    <span class="keyword">return</span> v1+v2;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//数组内是否有大于num的数字</span></div><div class="line">func func4(list:[Int], num:Int) -&gt;Bool{</div><div class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> list{</div><div class="line">        <span class="keyword">if</span>(func5(s,num)){</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;}</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//v1 是否大于 v2</span></div><div class="line">func func5(v1:Int, v2:Int) -&gt;Bool{</div><div class="line">    <span class="keyword">if</span>(v1&gt;v2){</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//函数嵌套函数</span></div><div class="line">func func6(v1:Int) -&gt;Int{</div><div class="line">    func func7(v2:Int) -&gt;Int{</div><div class="line">        <span class="keyword">return</span> v2+<span class="number">1</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> func7(v1);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">func1();</div><div class="line"></div><div class="line">func2(<span class="string">"1"</span>,<span class="string">"2"</span>);</div><div class="line"></div><div class="line">var v1 = func3(<span class="number">3</span>,<span class="number">4</span>);</div><div class="line">println(<span class="string">"v1 is \(v1)"</span>)</div><div class="line"></div><div class="line"></div><div class="line">var arr = [<span class="number">11</span>,<span class="number">2</span>,<span class="number">44</span>,<span class="number">58</span>,<span class="number">72</span>,<span class="number">20</span>];</div><div class="line"></div><div class="line">var v2 = func4(arr, <span class="number">100</span>);</div><div class="line"></div><div class="line">println(<span class="string">"v2 is \(v2)"</span>);</div><div class="line"></div><div class="line">var v3 = func6(<span class="number">100</span>);</div><div class="line"></div><div class="line">println(<span class="string">"v3 is \(v3)"</span>);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift_2_控制语句]]></title>
    <link href="/about/2014/07/21/Swift_2_%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>/about/2014/07/21/Swift_2_控制语句/</id>
    <published>2014-07-21T03:41:00.000Z</published>
    <updated>2014-10-30T10:47:14.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">println(<span class="string">"Hello, World!"</span>)</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">for  do While  While Switch</div><div class="line">*/</div><div class="line"></div><div class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr{</div><div class="line">    println(<span class="string">" i is \(i)"</span>);</div><div class="line">}</div><div class="line"></div><div class="line">var count = arr<span class="variable">.count</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (var i = <span class="number">0</span> ; i&lt;count; i++){</div><div class="line">    var index = arr[i];</div><div class="line">    println(<span class="string">"index is \(index)"</span>);</div><div class="line">}</div><div class="line"></div><div class="line">var index = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">do</span>{</div><div class="line">    var j = arr[index];</div><div class="line">    println(<span class="string">"j is \(j)"</span>);</div><div class="line">}<span class="keyword">while</span>(++index &lt; count);</div><div class="line"></div><div class="line"></div><div class="line">var x = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(x&lt;count){</div><div class="line">    println(<span class="string">"arr num is \(arr[x]) index = \(x++)"</span>);</div><div class="line">};</div><div class="line"></div><div class="line">var type = <span class="string">"iOS"</span></div><div class="line"></div><div class="line"><span class="comment">///没有break默认不执行下面语句, 如果想要执行(穿透)就加上fallthrough</span></div><div class="line"><span class="keyword">switch</span> type{</div><div class="line">    <span class="keyword">case</span> <span class="string">"iOS"</span>:</div><div class="line">        println(<span class="string">"------"</span>)</div><div class="line"><span class="comment">//        fallthrough;</span></div><div class="line">    <span class="keyword">case</span> <span class="string">"22"</span>:</div><div class="line">        println(<span class="string">"======="</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        println(<span class="string">"三三三三三"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div]]>
    </summary>
    
      <category term="Swift" scheme="/about/tags/Swift/"/>
    
      <category term="iOS应用开发之Swift" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BSwift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableView&UITableViewCell]]></title>
    <link href="/about/2014/06/04/UITableView&UITableViewCell/"/>
    <id>/about/2014/06/04/UITableView&UITableViewCell/</id>
    <published>2014-06-04T10:18:00.000Z</published>
    <updated>2014-10-30T10:47:16.000Z</updated>
    <content type="html"><![CDATA[<p>本文转自:<a href="http://www.cnblogs.com/smileEvday/archive/2012/06/28/tableView.html" target="_blank" rel="external">http://www.cnblogs.com/smileEvday/archive/2012/06/28/tableView.html</a></p>
<p>　　看TableView的资料其实已经蛮久了，一直想写点儿东西，却总是因为各种原因拖延，今天晚上有时间静下心来记录一些最近学习的TableView的知识。下面进入正题，UITableView堪称UIKit里面最复杂的一个控件了，使用起来不算难，但是要用好并不容易。当使用的时候我们必须要考虑到后台数据的设计，tableViewCell的设计和重用以及tableView的效率等问题。<br><strong>下面分9个方面进行介绍：</strong><br><strong>一、UITableView概述</strong><br>　　UITableView继承自UIScrollView，可以表现为Plain和Grouped两种风格，分别如下图所示：<br>      <img src="http://pic002.cnblogs.com/images/2012/302680/2012062719341052.png" alt="">        <img src="http://pic002.cnblogs.com/images/2012/302680/2012062719344359.png" alt=""><br>　　其中左边的是Plain风格的，右边的是Grouped风格，这个区别还是很明显的。<br>　　查看UITableView的帮助文档我们会注意到UITableView有两个Delegate分别为：dataSource和delegate。<br>　　<strong>dataSource</strong>是UITableViewDataSource类型，主要为UITableView提供显示用的数据(UITableViewCell)，指定UITableViewCell支持的编辑操作类型(insert，delete和reordering)，并根据用户的操作进行相应的数据更新操作，如果数据没有更具操作进行正确的更新，可能会导致显示异常，甚至crush。<br>　　<strong>delegate</strong>是UITableViewDelegate类型，主要提供一些可选的方法，用来控制tableView的选择、指定section的头和尾的显示以及协助完成cell的删除和排序等功能。<br>　　提到UITableView，就必须的说一说NSIndexPath。UITableView声明了一个NSIndexPath的类别，主要用来标识当前cell的在tableView中的位置，该类别有section和row两个属性，前者标识当前cell处于第几个section中，后者代表在该section中的第几行。<br>　　UITableView只能有一列数据(cell)，且只支持纵向滑动，当创建好的tablView第一次显示的时候，我们需要调用其reloadData方法，强制刷新一次，从而使tableView的数据更新到最新状态。</p>
<p><strong>二、UITableViewController简介</strong><br>　　UITableViewController是系统提供的一个便利类，主要是为了方便我们使用UITableView，该类生成的时候就将自身设置成了其包含的tableView的dataSource和delegate，并创建了很多代理函数的框架，为我们大大的节省了时间，我们可以通过其tableView属性获取该controller内部维护的tableView对象。默认情况下使用UITableViewController创建的tableView是充满全屏的，如果需要用到tableView是不充满全屏的话，我们应该使用UIViewController自己创建和维护tableView。<br>　　UITableViewController提供一个初始化函数initWithStyle:，根据需要我们可以创建Plain或者Grouped类型的tableView，当我们使用其从UIViewController继承来的init初始化函数的时候，默认将会我们创建一个Plain类型的tableView。<br>　　UITableViewController默认的会在viewWillAppear的时候，清空所有选中cell，我们可以通过设置self.clearsSelectionOnViewWillAppear<br> = NO，来禁用该功能，并在viewDidAppear中调用UIScrollView的flashScrollIndicators方法让滚动条闪动一次，从而提示用户该控件是可以滑动的。 </p>
<p><strong>三、UITableViewCell介绍</strong><br> 　　UITableView中显示的每一个单元都是一个UITableViewCell对象，看文档的话我们会发现其初始化函数initWithStyle:reuseIdentifier:比较特别，跟我们平时看到的UIView的初始化函数不同。这个主要是为了效率考虑，因为在tableView快速滑动的滑动的过程中，频繁的alloc对象是比较费时的，于是引入了cell的重用机制，这个也是我们在dataSource中要重点注意的地方，用好重用机制会让我们的tableView滑动起来更加流畅。<br>　　我们可以通过cell的selectionStyle属性指定cell选中时的显示风格，以及通过accessoryType来指定cell右边的显示的内容，或者直接指定accessoryView来定制右边显示的view。<br>　　系统提供的UITableView也包含了四种风格的布局，分别是:<br>    typedef enum {<br>        UITableViewCellStyleDefault,<br>        UITableViewCellStyleValue1,<br>        UITableViewCellStyleValue2,<br>        UITableViewCellStyleSubtitle<br>    } UITableViewCellStyle;<br>　　这几种文档中都有详细描述，这儿就不在累赘。然而可以想象系统提供的只是最常用的几种类型，当系统提供的风格不符合我们需要的时候，我们就需要对cell进行定制了，有以下两种定制方式可选：<br>　　<strong>1、直接向cell的contentView上面添加subView</strong><br>　　这是比较简单的一种的，根据布局需要我们可以在不同的位置添加subView。但是此处需要注意：所有添加的subView都最好设置为不透明的，因为如果subView是半透明的话，view图层的叠加将会花费一定的时间，这会严重影响到效率。同时如果每个cell上面添加的subView个数过多的话(通常超过3，4个)，效率也会受到比较大的影响。<br>　　下面我们看一个例子：<br><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>    - (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath<br>    {<br>        NSArray </em>sections = [SvTableViewDataModal sections];<br>        SvSectionModal *sectionModal = [sections objectAtIndex:indexPath.section];</p>
<pre><code>    <span class="keyword">static</span> <span class="built_in">NSString</span> *reuseIdetify = <span class="string">@"SvTableViewCell"</span>;
    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:reuseIdetify];
    <span class="keyword">if</span> (!cell) {
        cell = [[<span class="built_in">UITableViewCell</span> alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:reuseIdetify];
        cell<span class="variable">.accessoryType</span> = UITableViewCellAccessoryDisclosureIndicator;
        cell<span class="variable">.showsReorderControl</span> = <span class="literal">YES</span>;

        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) {
            <span class="built_in">UILabel</span> *label = [[<span class="built_in">UILabel</span> alloc] initWithFrame:CGRectMake(<span class="number">100</span> + <span class="number">15</span> * i, <span class="number">0</span>, <span class="number">30</span>, <span class="number">20</span>)];
            label<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];
            label<span class="variable">.text</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>, i];
            [cell<span class="variable">.contentView</span> addSubview:label];
            [label release];
        }
    }

    cell<span class="variable">.textLabel</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> clearColor];
    cell<span class="variable">.textLabel</span><span class="variable">.text</span> = [sectionModal<span class="variable">.cityNames</span> objectAtIndex:indexPath<span class="variable">.row</span>];
    <span class="keyword">return</span> cell;
} 
</code></pre><p><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>　　在上面这个例子中，我往每个cell中添加了6个subView，而且每个subView都是半透明(UIView默认是半透明的)，这个时候滑动起来明显就可以感觉到有点颤抖，不是很流畅。当把每一个subView的opaque属性设置成YES的时候，滑动会比之前流畅一些，不过还是有点儿卡。<br>　　<strong>2、从UITableViewCell派生一个类</strong><br>　　通过从UITableViewCell中派生一个类，可以更深度的定制一个cell，可以指定cell在进入edit模式的时候如何相应等等。最简单的实现方式就是将所有要绘制的内容放到一个定制的subView中，并且重载该subView的drawRect方法直接把要显示的内容绘制出来(这样可以避免subView过多导致的性能瓶颈)，最后再将该subView添加到cell派生类中的contentView中即可。但是这样定制的cell需要注意在数据改变的时候，通过手动调用该subView的setNeedDisplay方法来刷新界面，这个例子可以在苹果的帮助文档中的TableViewSuite工程中找到，这儿就不举例了。<br>　　观看这两种定制cell的方法，我们会发现subView都是添加在cell的contentView上面的，而不是直接加到cell上面，这样写也是有原因的。下面我们看一下cell在正常状态下和编辑状态下的构成图：<br>　　cell在正常状态下的构成图如下：<br><img src="http://pic002.cnblogs.com/images/2012/302680/2012062819321126.png" alt=""><br>　　进入编辑状态下cell的构成图如下：<br><img src="http://pic002.cnblogs.com/images/2012/302680/2012062819324942.png" alt=""><br>　　通过观察上面两幅图片我们可以看出来，当cell在进入编辑状态的时候，contentView会自动的缩放来给Editing control腾出位置。这也就是说如果我们把subView添加到contentView上，如果设置autoresizingMask为更具父view自动缩放的话，cell默认的机制会帮我们处理进入编辑状态的情况。而且在tableView是Grouped样式的时候，会为cell设置一个背景色，如果我们直接添加在cell上面的话，就需要自己考虑到这个背景色的显示问题，如果添加到contentView上，则可以通过view的叠加帮助我们完成该任务。综上，subView最好还是添加到cell的contentView中。</p>
<p><strong>四、Reordering</strong><br>　　为了使UITableVeiew进入edit模式以后，如果该cell支持reordering的话，reordering控件就会临时的把accessaryView覆盖掉。为了显示reordering控件，我们必须将cell的showsReorderControl属性设置成YES，同时实现dataSource中的tableView:moveRowAtIndexPath:toIndexPath:方法。我们还可以同时通过实现dataSource中的 tableView:canMoveRowAtIndexPath:返回NO，来禁用某一些cell的reordering功能。<br>　　下面看苹果官方的一个reordering流程图：<br><img src="http://pic002.cnblogs.com/images/2012/302680/2012062819375133.png" alt=""><br>　　上图中当tableView进入到edit模式的时候，tableView会去对当前可见的cell逐个调用dataSource的tableView:canMoveRowAtIndexPath:方法(此处官方给出的流程图有点儿问题)，决定当前cell是否显示reoedering控件，当开始进入拖动cell进行拖动的时候，每滑动过一个cell的时候，会去掉用delegate的tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:方法，去判断当前划过的cell位置是否可以被替换，如果不行则给出建议的位置。当用户放手时本次reordering操作结束，调用dataSource中的tableView:moveRowAtIndexPath:toIndexPath:方法更新tableView对应的数据。<br>　　此处给个我写demo中的更新数据的小例子：<br><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>    // if you want show reordering control, you must implement moveRowAtndexPath, or the reordering control will not show // when use reordering end, this method is invoke </p>
<pre><code>- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)<span class="built_in">source</span>IndexPath toIndexPath:(NSIndexPath *)destinationIndexPath
{
    // update DataModal

    NSArray *sections = [SvTableViewDataModal sections];
    SvSectionModal *<span class="built_in">source</span>SectionModal = [sections objectAtIndex:<span class="built_in">source</span>IndexPath.section];
    NSString *city = [[<span class="built_in">source</span>SectionModal.cityNames objectAtIndex:<span class="built_in">source</span>IndexPath.row] retain];
    [<span class="built_in">source</span>SectionModal.cityNames removeObject:city];
    [SvTableViewDataModal replaceSectionAtIndex:<span class="built_in">source</span>IndexPath.section withSection:<span class="built_in">source</span>SectionModal];

    SvSectionModal *desinationsSectionModal= [[SvTableViewDataModal sections] objectAtIndex:destinationIndexPath.section];
    [desinationsSectionModal.cityNames insertObject:city atIndex:destinationIndexPath.row];
    [SvTableViewDataModal replaceSectionAtIndex:destinationIndexPath.section withSection:desinationsSectionModal];

    [city release];
}
</code></pre><p><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>　　上面代码中首先拿到源cell所处的section，然后从该section对应的数据中移除，然后拿到目标section的数据，然后将源cell的数据添加到目标section中，并更新回数据模型，如果我们没有正确更新数据模型的话，显示的内容将会出现异常。</p>
<p><strong>五、Delete &amp; Insert</strong><br>　　cell的delete和insert操作大部分流程都是一样的，当进入编辑模式的时候具体的显示是delete<img src="http://pic002.cnblogs.com/images/2012/302680/2012062819411122.png" alt="">还是insert<img src="http://pic002.cnblogs.com/images/2012/302680/2012062819440770.png" alt="">取决与该cell的editingStyle的值，editStyle的定义如下：<br>    typedef enum {<br>        UITableViewCellEditingStyleNone,<br>        UITableViewCellEditingStyleDelete,<br>        UITableViewCellEditingStyleInsert<br>    } UITableViewCellEditingStyle;<br>　　当tableView进入编辑模式以后，cell上面显示的delete还是insert除了跟cell的editStyle有关，还与 tableView的delegate的tableView:editingStyleForRowAtIndexPath:方法的返回值有关(在这里唠叨一句，其实delegate提供了很多改变cell属性的机会，如非必要，还是不要去实现这些方法，因为执行这些方法也造成一定的开销)。<br>　　delete和insert的流程如下苹果官方文档中给出的图所示：<br><img src="http://pic002.cnblogs.com/images/2012/302680/2012062819454344.png" alt=""><br>　　下面是我写的demo中删除和添加部分的代码：<br><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>    #pragma mark -</p>
<pre><code>- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle <span class="keyword">for</span>RowAtIndexPath:(NSIndexPath *)indexPath
{
    NSLog(@<span class="string">"commit editStyle: %d"</span>, editingStyle);

    <span class="keyword">if</span> (editingStyle == UITableViewCellEditingStyleDelete) {
        NSArray *sections = [SvTableViewDataModal sections];
        SvSectionModal *<span class="built_in">source</span>SectionModal = [sections objectAtIndex:indexPath.section];
        [<span class="built_in">source</span>SectionModal.cityNames removeObjectAtIndex:indexPath.row];

        [SvTableViewDataModal replaceSectionAtIndex:indexPath.section withSection:<span class="built_in">source</span>SectionModal];
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationRight];
    }
    <span class="keyword">else</span> {
        // <span class="keyword">do</span> something <span class="keyword">for</span> add it
        NSArray *sections = [SvTableViewDataModal sections];
        SvSectionModal *<span class="built_in">source</span>SectionModal = [sections objectAtIndex:indexPath.section];
        [<span class="built_in">source</span>SectionModal.cityNames insertObject:@<span class="string">"new City"</span> atIndex:indexPath.row];
        [SvTableViewDataModal replaceSectionAtIndex:indexPath.section withSection:<span class="built_in">source</span>SectionModal];

        [tableView insertRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationRight];
    }
}
</code></pre><p><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>　　代码中首先判断当前操作是delete操作还是insert操作，相应的更新数据，最后根据情况调用tableView的insertRowsAtIndexPaths:withRowAnimation:或者deleteRowsAtIndexPaths:withRowAnimation:方法，对tableView的视图进行更新。cell的删除和添加操作相对还是比较简单的。</p>
<p><strong>六、Cell的Select操作</strong><br>　　当我们在tableView中点击一个cell的时候，将会调用tableView的delegate中的tableView:didSelectRowAtIndexPath:方法。<br>　　关于tableView的cell的选中，苹果官方有以下几个建议：<br> 　　1、不要使用selection来表明cell的选择状态，而应该使用accessaryView中的checkMark或者自定义accessaryView来显示选中状态。<br> 　　2、当选中一个cell的时候，你应该取消前一个cell的选中。<br> 　　3、如果cell选中的时候，进入下一级viewCOntroller，你应该在该级菜单从navigationStack上弹出的时候，取消该cell的选中。<br>　　这块儿再提一点，当一个cell的accessaryType为UITableViewCellAccessoryDisclosureIndicator的时候，点击该accessary区域通常会将消息继续向下传递，即跟点击cell的其他区域一样，将会掉delegate的tableView:didSelectRowAtIndexPath:方法，当时如果accessaryView为 UITableViewCellAccessoryDetailDisclosureButton的时候，点击accessaryView将会调用delegate的 tableView:accessoryButtonTappedForRowWithIndexPath:方法。</p>
<p><strong>七、批量插入，删除，部分更新操作</strong><br>　　UITableView提供了一个批量操作的特性，这个功能在一次进行多个row或者scetion的删除，插入，获取更新多个cell内容的时候特别好用。所有的批量操作需要包含在beginUpdates和endUpdates块中，否则会出现异常。<br>　　下面请看我demo中的一个批量操作的例子：<br><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>    - (void)groupEdit:(UIBarButtonItem*)sender<br>    {<br>        [_tableView beginUpdates];</p>
<pre><code>    <span class="comment">// first update the data modal</span>
    [_tableView insertRowsAtIndexPaths:[<span class="built_in">NSArray</span> arrayWithObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:<span class="number">0</span> inSection:<span class="number">0</span>]] withRowAnimation:UITableViewRowAnimationTop];

    [_tableView deleteSections:[<span class="built_in">NSIndexSet</span> indexSetWithIndex:<span class="number">0</span>] withRowAnimation:UITableViewRowAnimationTop];

    [SvTableViewDataModal deleteSectionAtIndex:<span class="number">0</span>];

    SvSectionModal *section = [[SvTableViewDataModal sections] objectAtIndex:<span class="number">0</span>];
    [section<span class="variable">.cityNames</span> insertObject:<span class="string">@"帝都"</span> atIndex:<span class="number">0</span>];
    [SvTableViewDataModal replaceSectionAtIndex:<span class="number">0</span> withSection:section];

    [_tableView endUpdates];
}
</code></pre><p><a href="&quot;复制代码&quot;"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>　　上面的例子中我们可以看到先往tableView的第0个section的第0行添加一个cell，然后将第0个section删掉。按照我们程序中写的顺序，那么新添加进去的“帝都”，将不在会显示，因为包含它的整个section都已经被删除了。<br>　　执行程序前后结果如下图：<br><img src="http://pic002.cnblogs.com/images/2012/302680/2012062820003824.png" alt="">              <img src="http://pic002.cnblogs.com/images/2012/302680/2012062820012876.png" alt=""><br>　　demo中第0个section是陕西省的城市，第1个section是北京。左边是执行前的截图，右边是执行后的截图，观察发现结果并不像我们前面推测的那样。那是因为在批量操作时，不管代码中先写的添加操作还是删除操作，添加操作都会被推出执行，直到这个块中所有的删除操作都执行完以后，才会执行添加操作，这也就是上面苹果官方图片上要表达的意思。<br>　　苹果官方文档有一副图可以帮助我们更好的理解这一点：<br><img src="http://pic002.cnblogs.com/images/2012/302680/2012062819544595.png" alt=""><br>　　原图中操作是：首先删除section 0中的row 1，然后删除section 1，再向section 1中添加一行。执行完批量更新以后就得到右半边的结果。<br> 　　<br><strong>八、IndexList</strong><br>　　当我们tableView中section有很多，数据量比较大的时候我们可以引入indexList，来方便完成section的定位，例如系统的通讯录程序。我们可以通过设置tableView的sectionIndexMinimumDisplayRowCount属性来指定当tableView中多少行的时候开始显示IndexList，默认的设置是NSIntegerMax，即默认是不显示indexList的。<br>　　为了能够使用indexlist我们还需要实现dataSource中一下两个方法：</p>
<pre><code><span class="pp">- <span class="params">(<span class="variable">NSArray</span> *)</span>sectionIndexTitlesForTableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView; - <span class="params">(<span class="variable">NSInteger</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView sectionForSectionIndexTitle:<span class="params">(<span class="variable">NSString</span> *)</span>title atIndex:<span class="params">(<span class="variable">NSInteger</span>)</span>index; </span>
</code></pre><p>　　第一个方法返回用于显示在indexList中的内容的数组，通常为A，B，C…Z。第二个方法的主要作用是根据用户在indexList中点击的位置，返回相应的section的index值。这个例子可以在苹果官方给出的TableViewSuite中找到，实现起来还是很简单的。</p>
<p><strong>九、其他</strong><br>　　<strong>1**</strong>、分割线<strong><br>　　我们可以通过设置tableView的separatorStyle属性来设置有无分割线以及分割线的风格，其中style定义如下：<br>    typedef enum {<br>        UITableViewCellSeparatorStyleNone,<br>        UITableViewCellSeparatorStyleSingleLine,<br>        UITableViewCellSeparatorStyleSingleLineEtched<br>    } UITableViewCellSeparatorStyle;<br>　　同时还可以通过tableView的separatorColor属性来设置分割线的颜色。
　　</strong>2、如何提高tableView的性能**</p>
<p>　　<strong>a、重用cell</strong><br>　　我们都知道申请内存是需要时间，特别是在一段时间内频繁的申请内存将会造成很大的开销，而且上tebleView中cell大部分情况下布局都是一样的，这个时候我们可以通过回收重用机制来提高性能。<br>　　<strong>b、避免content的重新布局</strong><br>　　尽量避免在重用cell时候，对cell的重新布局，一般情况在在创建cell的时候就将cell布局好。<br>　　<strong>c、使用不透明的subView</strong><br>　　在定制cell的时候，将要添加的subView设置成不透明的会大大减少多个view层叠加时渲染所需要的时间。<br>　　<strong>d、如果方便，直接重载subView的drawRect方法</strong><br><strong>　　</strong>如果定制cell的过程中需要多个小的元素的话，最好直接对要显示的多个项目进行绘制，而不是采用添加多个subView。<br>　　<strong>e、tableView的delegate的方法如非必要，尽量不要实现</strong><br>　　tableView的delegate中的很多函数提供了对cell属性的进一步控制，比如每个cell的高度，cell是否可以编辑，支持的edit风格等，如非必要最好不要实现这些方法因为快速的调用这些方法也会影响性能。<br>　　(以上5点建议，前三点来自苹果官方文档，后两点我自己加的，有什么不对的地方，欢迎指正)</p>
<p><strong>小结：</strong>UITableView本身是很复杂的，本片博客只起到抛砖引玉的作用，欢迎大家补充。想用好UITableView，还是需要实际项目中的锻炼的。</p>
<p>注：1、博客中的图片出了程序运行截图，其他的都来自苹果官方文档。<br>　　2、欢迎转载，转载请在显著位置添加原文链接地址和作者名称，谢谢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文转自:<a href="http://www.cnblogs.com/smileEvday/archive/2012/06/28/tableView.html" target="_blank" rel="external">http://www.cnblogs.com/]]>
    </summary>
    
      <category term="uitableviewcell" scheme="/about/tags/uitableviewcell/"/>
    
      <category term="uitableview" scheme="/about/tags/uitableview/"/>
    
      <category term="iOS应用开发之UITableViewCell" scheme="/about/categories/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8BUITableViewCell/"/>
    
  </entry>
  
</feed>
